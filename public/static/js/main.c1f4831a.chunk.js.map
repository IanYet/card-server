{"version":3,"sources":["components/DashBoard/dashBoard.module.css","components/Chatroom/chatroom.module.css","components/InfoPanel/infoPanel.module.css","components/Stage/stage.module.css","game/status.js","game/material.js","game/draw.js","game/utils.js","game/operate.js","game/calc.js","game/Board.js","game/app.js","components/store.js","components/Chatroom/data.js","net.js","components/Chatroom/index.js","components/DashBoard/Card.js","components/DashBoard/data.js","components/DashBoard/index.js","components/InfoPanel/calc.js","components/InfoPanel/data.js","components/InfoPanel/index.js","components/Stage/index.js","App.js","index.js"],"names":["module","exports","constant","red","yellow","green","blue","setColor","chat","step","error","status","areas","buildings","floors","oriViewState","camera","controls","mode","playedChess","playedCard","playedArea","truePos","girdMatrial","MeshLambertMaterial","color","Color","girdMatrial0","alphaMap","TextureLoader","load","transparent","depthWrite","chessMatrialMap","tempChessMaterialMap","opacity","windowMaterial","emissive","emissiveIntensity","side","DoubleSide","skyMaterial","MeshBasicMaterial","map","color1","color2","width","height","cav","document","createElement","ctx","getContext","gra","createLinearGradient","addColorStop","fillStyle","fillRect","CanvasTexture","generateTexture","BackSide","drawBuilding","buildingGroup","buildingData","length","floorData","shift","oriHeight","userData","data","reduce","pre","cur","parseInt","push","Promise","res","rej","floorGroup","generateFloor","position","setZ","rotateX","Math","PI","children","add","then","type","substr","colorType","idx","Group","geo","BoxBufferGeometry","mat","mesh","Mesh","i","f","plane","PlaneBufferGeometry","planeMat","win","rotateY","setX","setY","utils","disposeAll","obj","remove","geometry","dispose","material","Object","keys","forEach","prop","rotateUp","pos","up","x","y","corner","middle","cornerIdx","findIndex","a","b","middleIdx","Number","findGroup","object","groupType","parent","operate","raycaster","intersectObject","tempFloor","pointerDownTime","choose","objs","subMesh","intersectObjects","handleViewModeMove","ev","floor","Tween","scale","easing","TWEEN","Easing","Circular","In","to","z","start","Out","handleOperModeMove","area","preBuilding","find","id","building","parseFloorData","colorMap","max","newColor","newHeight","checkBuildable","addFloor","handlePointerUp","timeStamp","button","Board","changeMode","handlePointerDown","createTempFloor","disposeTempFloor","this","el","addEventListener","play","card","reset","renderer","initRenderer","initCamera","secondViewCamera","initSecondViewCamera","scene","initScene","initControls","mouse","Vector2","initRaycaster","initLights","initEvents","initSky","update","style","appendChild","WebGLRenderer","canvas","antialias","autoClear","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","PerspectiveCamera","copy","Vector3","OrthographicCamera","lookAt","zoom","Scene","background","OrbitControls","domElement","screenSpacePanning","enableDamping","dampingFactor","maxPolarAngle","target","set","light0","HemisphereLight","light2","DirectionalLight","light3","SphereBufferGeometry","onresize","aspect","updateProjectionMatrix","left","right","top","bottom","onpointermove","event","clientX","clientY","Raycaster","setFromCamera","opt","requestAnimationFrame","render","cityData","cityGroup","axesHelper","AxesHelper","areaGroup","idNum","replace","rotateZ","positionVec","gridGroup","front","back","clone","gridGeo","grid","drawCity","board","STEP","store","userId","cardData","chessData","userList","leftChessData","1","2","3","4","playedData","msgListAtom","atom","key","default","playedDataAtom","net","url","ws","setUrl","setKey","setId","getInitData","axios","get","users","sort","setWs","WebSocket","onopen","send","JSON","stringify","roomKey","payload","preOnmessage","onmessage","console","log","parse","postRoundChess","postData","post","playData","postScore","scoreData","Chatroom","useState","isSpread","toggleSpread","inputMsg","setInputMsg","useRecoilState","msgList","setMsgList","playedDataList","useRecoilValue","isChatChannel","toggleChannel","listRef","useRef","useEffect","preOnMessage","value","message","current","scrollTop","scrollHeight","className","chatroom","symbol","spread","onClick","popList","ref","msg","pop","self","collapse","d","inputContainer","channelTitle","input","onChange","onKeyDown","preventDefault","placeholder","drawRoundRect","radius","isFill","beginPath","moveTo","lineTo","arc","stroke","fill","Card","selectedCard","setSelectedCard","hoveredCard","setHoveredCard","stepAtom","lineWidth","strokeStyle","j","selected","selectedNext","hovered","hoveredNext","borderColor","onPointerEnter","onPointerLeave","_cardData","cardDataSelector","selector","newValue","_roundChessData","roundChessDataSelector","leftChessDataAtom","tempMsgAtom","DashBoard","setCardData","roundChessData","setRoundChessData","setLeftChess","selectedChess","setSelectedChess","tempRoundChess","setTempRoundChess","submitPressed","pressSubmit","tempMsg","setTempMsg","isReady","readyAtom","userNum","stepMsg","includes","setTimeout","submitBtn","submit","pressed","chessList","chess","chessMap","val","roundChess","leftChess","catch","preMsg","leftCard","filter","body","newCard","roundChessArea","src","alt","chessHolder","rowChessArea","level","Array","r","marginLeft","marginBottom","leftChessArea","btnBars","backView","btnArea","your","other","dash","cardArea","chessArea","userInfoAtom","InfoPanel","userInfo","setSpread","score","result","highest","areaId","areaRes","topColor","floorColor","mostColor","num","calcScore","info","user","userboard","spreadTmp","pin","avatar","pointerContainer","long","infoRow","hide","chessType","Stage","setPlayedData","useSetRecoilState","setUserInfo","init","drawBoard","newUser","pu","stage","App","readyGo","setStep","setLeftChessData","location","pathname","split","search","ReactDOM","StrictMode","getElementById"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,KAAO,wBAAwB,SAAW,4BAA4B,UAAY,6BAA6B,eAAiB,kCAAkC,MAAQ,yBAAyB,YAAc,+BAA+B,cAAgB,iCAAiC,aAAe,gCAAgC,KAAO,wBAAwB,YAAc,+BAA+B,aAAe,gCAAgC,QAAU,2BAA2B,SAAW,4BAA4B,IAAM,uBAAuB,MAAQ,yBAAyB,KAAO,wBAAwB,OAAS,0BAA0B,QAAU,2BAA2B,IAAM,uBAAuB,QAAU,2BAA2B,OAAS,0BAA0B,QAAU,2BAA2B,SAAW,8B,mBCAn2BD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,OAAS,yBAAyB,IAAM,sBAAsB,OAAS,yBAAyB,OAAS,yBAAyB,MAAQ,wBAAwB,KAAO,uBAAuB,eAAiB,iCAAiC,aAAe,+BAA+B,MAAQ,wBAAwB,QAAU,0BAA0B,IAAM,sBAAsB,KAAO,uBAAuB,SAAW,6B,mBCAjeD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,UAAY,6BAA6B,IAAM,uBAAuB,OAAS,0BAA0B,IAAM,uBAAuB,OAAS,0BAA0B,KAAO,wBAAwB,MAAQ,yBAAyB,iBAAmB,oCAAoC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,MAAQ,yBAAyB,KAAO,wBAAwB,UAAY,+B,mBCAtgBD,EAAOC,QAAU,CAAC,MAAQ,uB,0LCDpBC,EACS,EADTA,EAES,EAFTA,EAIU,EAJVA,EAKU,EALVA,EAOU,OAPVA,EAQU,OARVA,EASc,WATdA,EAUU,OAVVA,EAWW,QAXXA,EAaS,CACPC,IAAK,UACLC,OAAQ,UACRC,MAAO,UACPC,KAAM,WAjBRJ,EAmBO,CACLK,SAAU,WACVC,KAAM,OACNC,KAAM,OACNC,MAAO,SAITC,EAAS,CACXC,MAAO,GACPC,UAAW,GACXC,OAAQ,GACRC,aAAc,CACVC,OAAQ,GACRC,SAAU,IAEdC,KAAMhB,EACNiB,YAAa,GACbC,WAAY,GACZC,WAAY,GACZC,QAAS,IC5BPC,EAAc,IAAIC,IAAoB,CACxCC,MAAO,IAAIC,IAAM,sBAGfC,EAAe,IAAIH,IAAoB,CACzCI,UAAU,IAAIC,KAAgBC,KAAK,eACnCC,aAAa,EACbC,YAAY,IAGVC,EAAkB,CACpB9B,IAAK,IAAIqB,IAAoB,CAAEC,MAAOvB,EAAmBC,MACzDC,OAAQ,IAAIoB,IAAoB,CAAEC,MAAOvB,EAAmBE,SAC5DC,MAAO,IAAImB,IAAoB,CAAEC,MAAOvB,EAAmBG,QAC3DC,KAAM,IAAIkB,IAAoB,CAAEC,MAAOvB,EAAmBI,QAGxD4B,EAAuB,CACzB/B,IAAK,IAAIqB,IAAoB,CACzBC,MAAOvB,EAAmBC,IAC1B4B,aAAa,EACbI,QAAS,KAEb/B,OAAQ,IAAIoB,IAAoB,CAC5BC,MAAOvB,EAAmBE,OAC1B2B,aAAa,EACbI,QAAS,KAEb9B,MAAO,IAAImB,IAAoB,CAC3BC,MAAOvB,EAAmBG,MAC1B0B,aAAa,EACbI,QAAS,KAEb7B,KAAM,IAAIkB,IAAoB,CAC1BC,MAAOvB,EAAmBI,KAC1ByB,aAAa,EACbI,QAAS,MAIXC,EAAiB,IAAIZ,IAAoB,CAC3CC,MAAO,SACPU,QAAS,GACTJ,aAAa,EACbM,SAAU,SACVC,kBAAmB,EACnBC,KAAMC,MAGJC,EAAc,IAAIC,IAAkB,CACtCC,IAIJ,SAAyBC,EAAQC,EAAQC,EAAOC,GAC5C,IAAMC,EAAMC,SAASC,cAAc,UACnCF,EAAID,OAASA,EACbC,EAAIF,MAAQA,EACZ,IAAMK,EAAMH,EAAII,WAAW,MACrBC,EAAMF,EAAIG,qBAAqB,EAAG,EAAG,EAAGP,GAO9C,OANAM,EAAIE,aAAa,EAAGV,GACpBQ,EAAIE,aAAa,GAAKX,GAEtBO,EAAIK,UAAYH,EAChBF,EAAIM,SAAS,EAAG,EAAGX,EAAOC,GAEnB,IAAIW,IAAcV,GAhBpBW,CAAgB,UAAW,UAAW,IAAK,KAChDpB,KAAMqB,MCxCV,IAqGMC,EAAe,SAAfA,EAAgBC,EAAeC,GACjC,GAAKA,EAAaC,OAAlB,CAEA,IAAMC,EAAYF,EAAaG,QACzBC,EAIE,IAHJL,EAAcM,SAASC,KAAKC,QACxB,SAACC,EAAKC,GAAN,OAAcD,EAAME,SAASD,KAC7B,GAKR,OAFAV,EAAcM,SAASC,KAAKK,KAAKT,GAE1B,IAAIU,SAAQ,SAACC,EAAKC,GACrB,IAAMC,EAAaC,EAAcd,GAEjCa,EAAWE,SAASC,KAAKd,EAAa,IAAMM,SAASR,GAAc,GAE9DE,EAAY,IAAO,IAChBM,SAASR,GAAa,EACtBa,EAAWI,QAAQC,KAAKC,IAExBtB,EAAcuB,SACVvB,EAAcuB,SAASrB,OAAS,GAClCkB,QAAQC,KAAKC,KAIvBzE,EAAOG,OAAO4D,KAAKI,GACnBhB,EAAcwB,IAAIR,GAClBF,OACDW,MAAK,kBAAM1B,EAAaC,EAAeC,QAoCxCgB,EAAgB,SAACd,GAA2C,IAAhCuB,EAA+B,uDAAxBtF,EAAwB,EACpC,CAAC+D,EAAUwB,OAAO,GAAIhB,SAASR,IAAjDyB,EADsD,KAC3CC,EAD2C,KAEvDb,EAAa,IAAIc,IAEvBd,EAAWV,SAASoB,KAAOtF,EAC3B4E,EAAWV,SAASC,KAAOJ,EAE3B,IAAM4B,EAAM,IAAIC,IAAkB,IAAK,IAAK,IAAMH,GAC5CI,EACFP,IAAStF,EACH+B,EAAgByD,GAChBxD,EAAqBwD,GACzBM,EAAO,IAAIC,IAAKJ,EAAKE,GAC3BjB,EAAWQ,IAAIU,GAEf,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAKQ,IAAK,CAC1B,IAAMC,EAAQ,IAAIC,IAAoB,IAAK,KACrCC,EAAWlE,EACXmE,EAAM,IAAIN,IAAKG,EAAOE,GAQ5B,OAPAxB,EAAWQ,IAAIiB,GAEfA,EAAIrB,QAAQC,KAAKC,GAAK,GACtBmB,EAAIC,QAAUN,EAAI,EAAKf,KAAKC,GAAM,GAElCmB,EAAIvB,SAASC,KAAS,IAAJkB,EAAgB,IAANR,EAAY,KAEhCO,GACJ,KAAK,EACDK,EAAIvB,SAASyB,KAAMN,EAAI,EAAK,IAAM,KAClCI,EAAIvB,SAAS0B,MAAM,KACnB,MACJ,KAAK,EACDH,EAAIvB,SAASyB,KAAK,KAClBF,EAAIvB,SAAS0B,KAAMP,EAAI,EAAK,IAAM,KAClC,MACJ,KAAK,EACDI,EAAIvB,SAASyB,MAAON,EAAI,GAAK,EAAK,IAAM,KACxCI,EAAIvB,SAAS0B,KAAK,KAClB,MACJ,KAAK,EACDH,EAAIvB,SAASyB,MAAM,KACnBF,EAAIvB,SAAS0B,MAAOP,EAAI,GAAK,EAAK,IAAM,MAOxD,OAAOrB,G,eC9OL6B,EAAQ,CACVC,WADU,SACCC,GAEP,GAAKA,EAAL,CAEA,KAAOA,EAAIxB,SAASrB,OAAS,GACzB2C,EAAMC,WAAWC,EAAIxB,SAAS,IAC9BwB,EAAIC,OAAOD,EAAIxB,SAAS,IAExBwB,EAAIE,UAAUF,EAAIE,SAASC,UAE3BH,EAAII,WAEJC,OAAOC,KAAKN,EAAII,UAAUG,SAAQ,SAACC,GAC1BR,EAAII,SAASI,IAES,OAAvBR,EAAII,SAASI,IACyB,oBAA/BR,EAAII,SAASI,GAAML,SAE1BH,EAAII,SAASI,GAAML,aAE3BH,EAAII,SAASD,aAIrBM,SAzBU,SAyBDC,EAAKC,GAAK,IAAD,cACCD,EADD,GACPE,EADO,KACJC,EADI,KAERC,EAAS,CACX,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAEFC,EAAS,CACX,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAGFC,EAAYF,EAAOG,WAAU,mCAAEC,EAAF,KAAKC,EAAL,YAAYD,IAAMN,GAAKO,IAAMN,KAC1DO,EAAYL,EAAOE,WAAU,mCAAEC,EAAF,KAAKC,EAAL,YAAYD,IAAMN,GAAKO,IAAMN,KAEhE,OAAmB,IAAfO,EACOL,GAAQK,EAAYC,OAAOV,IAAO,IACnB,IAAfK,EACAF,GAAQE,EAAYK,OAAOV,IAAO,GAElCD,ICzCbY,EAAY,SAAZA,EAAaC,EAAQC,GACvB,OAAKD,EAAOE,OAEQ,UAAhBF,EAAO5C,MAAoB4C,EAAOhE,SAASoB,OAAS6C,EAC7CD,EAEAD,EAAUC,EAAOE,OAAQD,GALT,MASzBE,EAAU,CACZC,UAAW,KACXC,gBAAiB,KACjBC,UAAW,KACXC,gBAAiB,EACjBnB,GAAI,EAEJoB,OAPY,SAOLC,EAAMrD,GAAO,IAAD,EACTsD,EAAO,UAAGP,EAAQC,UAAUO,iBAAiBF,GAAM,GAAM,UAAlD,aAAG,EACVT,OAEN,OAAKU,EAEEX,EAAUW,EAAStD,GAFL,MAKzBwD,mBAhBY,SAgBOC,GACf,GAAItI,EAAOO,OAAShB,EAApB,CAEA,IAAMgJ,EAAQX,EAAQK,OAAOjI,EAAOG,OAAQZ,GAE5C,GAAIqI,EAAQE,kBAAoBS,EAAhC,CAEA,GAAIX,EAAQE,gBACY,IAAIU,IAAMZ,EAAQE,gBAAgBW,OACjDC,OAAOC,IAAMC,OAAOC,SAASC,IAC7BC,GAAG,CAAEjC,EAAG,EAAGC,EAAG,EAAGiC,EAAG,GAAK,KAClBC,QAGhB,GAAIV,EACoB,IAAIC,IAAMD,EAAME,OAC/BC,OAAOC,IAAMC,OAAOC,SAASK,KAC7BH,GAAG,CAAEjC,EAAG,IAAKC,EAAG,IAAKiC,EAAG,KAAO,KACxBC,QAEhBrB,EAAQE,gBAAkBS,KAG9BY,mBAvCY,SAuCOb,GACf,GAAItI,EAAOO,OAAShB,GAEfqI,EAAQG,UAAb,CAEA,IAAMqB,EAAOxB,EAAQK,OAAOjI,EAAOC,MAAOV,GAE1C,GAAIqI,EAAQE,kBAAoBsB,EAAhC,CAPmB,IF2HNjG,EAAeoF,EE3HT,EASJvC,EAAMW,SAAS3G,EAAOS,WAAYmH,EAAQf,IATtC,mBASZC,EATY,KASTC,EATS,KAYnB,GAAIa,EAAQE,gBAAiB,CACzB,IAAMuB,EAAczB,EAAQE,gBAAgBpD,SAAS4E,MACjD,SAACjC,GAAD,OACIA,EAAE5D,SAAS8F,KAAX,UACG3B,EAAQE,gBAAgBrE,SAAS8F,GADpC,YAC0CzC,EAD1C,YAC+CC,MF2G9C5D,EEzGGkG,EFyGYd,EEzGCX,EAAQG,UF0GzC5E,EAAcgD,OAAOoC,GEvGjB,GAAIa,EAAM,CACN,IAAMI,EAAWJ,EAAK1E,SAAS4E,MAC3B,SAACjC,GAAD,OAAOA,EAAE5D,SAAS8F,KAAX,UAAqBH,EAAK3F,SAAS8F,GAAnC,YAAyCzC,EAAzC,YAA8CC,OC/E9C,SAAC3D,EAAcE,GAClC,IADgD,EAC1CmG,EAAiB,SAAC/F,GAAD,MAAU,CAACA,EAAKoB,OAAO,GAAIhB,SAASJ,KAErDgG,EAAW,CACblK,IAAK,EACLC,OAAQ,EACRE,KAAM,EACND,MAAO,EACPiK,IAAK,GARuC,cAW/BvG,GAX+B,IAWhD,2BAA+B,CAAC,IAAD,EACHqG,EADG,4BACpB3I,EADoB,KACbsB,EADa,KAE3BsH,EAAS5I,IAAUsB,EAEfsH,EAAS5I,IAAU4I,EAASC,MAC5BD,EAASC,IAAMD,EAAS5I,KAhBgB,oCAoBlB2I,EAAenG,GApBG,mBAoBzCsG,EApByC,KAoB/BC,EApB+B,KAsBhD,OAAIH,EAASE,GAAYC,GAAaH,EAASC,KD4DnCG,CACIN,EAAS/F,SAASC,KAClBkE,EAAQG,UAAUtE,SAASC,OF6E9B,SAACP,EAAeoF,GAC7B,IAAM/E,EAIE,IAHJL,EAAcM,SAASC,KAAKC,QACxB,SAACC,EAAKC,GAAN,OAAcD,EAAME,SAASD,KAC7B,GAEFP,EAAYiF,EAAM9E,SAASC,KAEjCP,EAAcwB,IAAI4D,GAClBA,EAAMlE,SAASC,KAAKd,EAAa,IAAMM,SAASR,GAAc,GAC9DiF,EAAMhE,QAAUf,EAAY,IAAO,EAAKgB,KAAKC,IEpFjCsF,CAASP,EAAU5B,EAAQG,WAGnCH,EAAQE,gBAAkBsB,KAG9BY,gBA5EY,SA4EI1B,GAEZ,KADaA,EAAG2B,UAAYrC,EAAQI,iBACxB,KAEZ,GAAkB,IAAdM,EAAG4B,OAAc,CACjB,GAAIlK,EAAOO,OAAShB,EAAoB,OAEpCqI,EAAQE,kBACR9H,EAAOU,WAAakH,EAAQE,gBAAgBrE,SAAS8F,GACrDvJ,EAAOW,QAAUqF,EAAMW,SAAS3G,EAAOS,WAAYmH,EAAQf,IAC3DsD,EAAMC,WAAW7K,SAEA,IAAd+I,EAAG4B,QACVC,EAAMC,WAAW7K,IAGzB8K,kBA5FY,SA4FM/B,GACdV,EAAQI,gBAAkBM,EAAG2B,WAGjCK,gBAhGY,WAgGO,IAAD,EACd,IAAI,UAACtK,EAAOS,kBAAR,aAAC,EAAmB4C,SAAWrD,EAAOQ,YAA1C,CAEAoH,EAAQ2C,mBAER,IAAMjH,EAAYtD,EAAOQ,YACnB+H,EAAQnE,EAAcd,EAAW/D,GACvCiL,KAAKzC,UAAYQ,IAGrBgC,iBA1GY,WA2GJ3C,EAAQG,YACJH,EAAQG,UAAUJ,QAClBC,EAAQG,UAAUJ,OAAOxB,OAAOyB,EAAQG,WAC5C/B,EAAMC,WAAW2B,EAAQG,aAUjCkB,MAxHY,SAwHNwB,EAAI5C,GACND,EAAQC,UAAYA,EACpB4C,EAAGC,iBAAiB,cAAe9C,EAAQS,oBAC3CoC,EAAGC,iBAAiB,cAAe9C,EAAQuB,oBAC3CsB,EAAGC,iBAAiB,cAAeF,KAAKH,mBACxCI,EAAGC,iBAAiB,YAAaF,KAAKR,kBAG1CW,KAhIY,SAgIPpC,EAAOqC,EAAMxB,EAAMvC,GACpB,IAAMzD,EAAe,CAACmF,GADE,EAETvC,EAAMW,SAASiE,EAAM/D,GAFZ,mBAEjBC,EAFiB,KAEdC,EAFc,KAGlB5D,EAAgBnD,EAAOE,UAAUoJ,MACnC,SAACE,GAAD,OAAcA,EAAS/F,SAAS8F,KAAlB,UAA4BH,EAA5B,YAAoCtC,EAApC,YAAyCC,MAG3D7D,EAAaC,EAAeC,IAGhCyH,MA1IY,WA2IRjD,EAAQI,gBAAkB,EAC1BJ,EAAQE,gBAAkB,OEvI5BqC,E,oFAeF,SAAKM,GACDD,KAAKM,SAAWN,KAAKO,aAAaN,GAClCD,KAAKnK,OAASmK,KAAKQ,aACnBR,KAAKS,iBAAmBT,KAAKU,uBAC7BV,KAAKW,MAAQX,KAAKY,YAClBZ,KAAKlK,SAAWkK,KAAKa,eACrBb,KAAKc,MAAQ,IAAIC,IACjBf,KAAK3C,UAAY2C,KAAKgB,gBACtBhB,KAAKjK,KAAOhB,EAEZiL,KAAKiB,aACLjB,KAAKkB,aACLlB,KAAKmB,UAELnB,KAAKoB,W,0BAQT,SAAanB,GACT,IAAMpI,EAAMC,SAASC,cAAc,UACnCF,EAAIwJ,MAAMzJ,OAAS,QACnBC,EAAIwJ,MAAM1J,MAAQ,QAClBsI,EAAGqB,YAAYzJ,GAEf,IAAMyI,EAAW,IAAIiB,IAAc,CAC/BC,OAAQ3J,EACR4J,WAAW,EACXC,WAAW,IAMf,OAHApB,EAASqB,cAAcC,OAAOC,kBAC9BvB,EAASwB,QAAQF,OAAOG,WAAYH,OAAOI,aAEpC1B,I,wBAOX,WACI,IAAMzK,EAAS,IAAIoM,IACf,GACAL,OAAOG,WAAaH,OAAOI,YAC3B,IACA,KAWJ,OATAJ,OAAO/L,OAASA,EAChBA,EAAOwG,GAAG6F,KAAK,IAAIC,IAAQ,EAAG,EAAG,IACjCtM,EAAOgE,SAAS0B,MAAM,MACtB1F,EAAOgE,SAASC,KAAK,KAErBtE,EAAOI,aAAaC,OAAS,CACzBgE,UAAU,IAAIsI,KAAUD,KAAKrM,EAAOgE,UACpCwC,GAAI,IAAI8F,IAAQ,EAAG,EAAG,IAEnBtM,I,kCAGX,WACI,IAAMA,EAAS,IAAIuM,IACfR,OAAOG,YAAc,EACrBH,OAAOG,WAAa,EACpBH,OAAOI,YAAc,EACrBJ,OAAOI,aAAe,EACtB,GACA,KAMJ,OAJAnM,EAAOwG,GAAG6F,KAAK,IAAIC,IAAQ,EAAG,EAAG,IACjCtM,EAAOgE,SAASqI,KAAK,IAAIC,KAAS,IAAM,EAAG,MAC3CtM,EAAOwM,OAAO,IAAIF,IAAQ,EAAG,EAAG,IAChCtM,EAAOyM,KAAO,GACPzM,I,uBAOX,WACI,IAAM8K,EAAQ,IAAI4B,IAElB,OADA5B,EAAM6B,WAAa,IAAIjM,IAAM,kBACtBoK,I,0BAOX,WACI,IAAM7K,EAAW,IAAI2M,IACjBzC,KAAKnK,OACLmK,KAAKM,SAASoC,YAYlB,OAVA5M,EAAS6M,oBAAqB,EAC9B7M,EAAS8M,eAAgB,EACzB9M,EAAS+M,cAAgB,GACzB/M,EAASgN,cAAgB9I,KAAKC,GAAK,EAEnCnE,EAASiN,OAAOC,IAAI,EAAG,EAAG,KAC1BxN,EAAOI,aAAaE,SAAW,CAC3BiN,QAAQ,IAAIZ,KAAUD,KAAKpM,EAASiN,SAGjCjN,I,wBAGX,WACI,IAAMmN,EAAS,IAAIC,IAEf,IAAI3M,IAAM,UACV,IAAIA,IAAM,UACV,IAEJ0M,EAAOpJ,SAASmJ,IAAI,EAAG,EAAG,GAC1BhD,KAAKW,MAAMxG,IAAI8I,GAEf,IAAME,EAAS,IAAIC,IAAiB,IAAI7M,IAAM,UAAW,KACzD4M,EAAOtJ,SAASqI,KAAK,IAAIC,IAAQ,GAAI,EAAG,IACxCnC,KAAKW,MAAMxG,IAAIgJ,GAEf,IAAME,EAAS,IAAID,IAAiB,IAAI7M,IAAM,UAAW,KACzD8M,EAAOxJ,SAASqI,KAAK,IAAIC,KAAS,EAAG,EAAG,IACxCnC,KAAKW,MAAMxG,IAAIkJ,K,qBAGnB,WACI,IAAM3I,EAAM,IAAI4I,IAAqB,IAAO,GAAI,IAC1C1I,EAAMtD,EACNuD,EAAO,IAAIC,IAAKJ,EAAKE,GAC3BC,EAAKd,QAAQC,KAAKC,GAAK,GACvB+F,KAAKW,MAAMxG,IAAIU,K,wBAGnB,WAAc,IAAD,OACT+G,OAAO2B,SAAW,SAACzF,GACf,EAAKjI,OAAO2N,OAAS5B,OAAOG,WAAaH,OAAOI,YAChD,EAAKnM,OAAO4N,yBAEZ,EAAKhD,iBAAiBiD,KAAO9B,OAAOG,YAAc,EAClD,EAAKtB,iBAAiBkD,MAAQ/B,OAAOG,WAAa,EAClD,EAAKtB,iBAAiBmD,IAAMhC,OAAOI,aAAe,EAClD,EAAKvB,iBAAiBoD,OAASjC,OAAOI,YAAc,EAEpD,EAAK1B,SAASwB,QAAQF,OAAOG,WAAYH,OAAOI,cAEpDJ,OAAOkC,cAAgB,SAACC,GACpB,EAAKjD,MAAMxE,EAAKyH,EAAMC,QAAUpC,OAAOG,WAAc,EAAI,EACzD,EAAKjB,MAAMvE,GAAMwH,EAAME,QAAUrC,OAAOI,YAAe,EAAI,K,2BAInE,WACI,IAAM3E,EAAY,IAAI6G,IAEtB,OADA7G,EAAU8G,cAAcnE,KAAKc,MAAOd,KAAKnK,QAClCwH,I,oBAGX,SAAO+G,M,oBAEP,WAAU,IAAD,OACLC,uBAAsB,kBAAM,EAAKjD,YACjCjD,IAAMiD,SAENpB,KAAKlK,SAASsL,SACdpB,KAAK3C,UAAU8G,cAAcnE,KAAKc,MAAOd,KAAKnK,QAQ9CmK,KAAKM,SAASgE,OAAOtE,KAAKW,MAAOX,KAAKnK,U,uBAsB1C,SAAUwG,EAAIkI,IJtND,SAAC5D,EAAOtE,EAAIkI,GACzB,IAAMC,EAAY,IAAI/J,IACtB+J,EAAUvL,SAASoB,KAAOtF,EAC1B4L,EAAMxG,IAAIqK,GAGV,IAAMC,EAAa,IAAIC,IAAW,KAClCF,EAAUrK,IAAIsK,GACd7C,OAAO6C,WAAaA,EAIpB,IAFA,IAEA,MAFgB1I,OAAOC,KAAKuI,GAE5B,eAAwB,CAAnB,IAAIxF,EAAE,KACDH,EAAO2F,EAASxF,GAChB4F,EAAY,IAAIlK,IACtBkK,EAAU1L,SAAS8F,GAAKA,EACxB4F,EAAU1L,SAASoB,KAAOtF,EAE1B,IAAM6P,EAAQtL,SAASyF,EAAG8F,QAAQ,OAAQ,KAC1CF,EAAU9K,SAASyB,KAAMsJ,EAAQ,EAAK,KAAO,MAC7CD,EAAU9K,SAAS0B,KAAK,KAA6B,KAAtBjC,SAASsL,EAAQ,IAChDD,EAAU9K,SAASC,KAAK,GAGxB6K,EAAUG,QAASzI,EAAK,EAAKrC,KAAKC,GAAK,GAEvCuK,EAAUrK,IAAIwK,GACdnP,EAAOC,MAAM8D,KAAKoL,GAElB,IAAK,IAAIrI,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAM3D,EAAY,YAAOgG,EAAKtC,GAAGC,IAE3B5D,EAAgB,IAAI8B,IAC1B9B,EAAcM,SAAS8F,GAAvB,UAA+BA,EAA/B,YAAqCzC,EAArC,YAA0CC,GAC1C5D,EAAcM,SAASC,KAAO,GAC9BP,EAAcM,SAASoB,KAAOtF,EAE9B4P,EAAUxK,IAAIxB,GACdnD,EAAOE,UAAU6D,KAAKZ,GAEtB,IAAMoM,EAAc,IAAI5C,IAChB,KAAJ5F,EAAW,KACX,KAAW,KAAJD,EACP,GAEJ3D,EAAckB,SAASqI,KAAK6C,GAE5B,IAAMC,EAAY,IAAIvK,IACtBuK,EAAU/L,SAASoB,KAAOtF,EAC1B4D,EAAcwB,IAAI6K,GAClBA,EAAUnL,SAASC,MAAM,KAEzB,IAAM8J,EAAM,IAAI9I,IACZ,IAAII,IAAoB,IAAM,KAC9B9E,GAEJwN,EAAI/J,SAASC,KAAK,KAClBkL,EAAU7K,IAAIyJ,GAEd,IAAMqB,EAAQ,IAAInK,IACd,IAAII,IAAoB,IAAM,KAC9B1E,GAEJyO,EAAMpL,SAASmJ,IAAI,GAAI,KAAM,IAC7BiC,EAAMH,QAAQ9K,KAAKC,IACnBgL,EAAMlL,SAASC,KAAKC,GAAK,GACzB+K,EAAU7K,IAAI8K,GAEd,IAAMC,EAAOD,EAAME,QACnBD,EAAKrL,SAAS0B,KAAK,KACnB2J,EAAK7J,QAAQrB,KAAKC,IAClB+K,EAAU7K,IAAI+K,GAEd,IAAMxB,EAAOuB,EAAME,QACnBzB,EAAK7J,SAAS0B,KAAK,GACnBmI,EAAK7J,SAASyB,MAAM,KACpBoI,EAAKrI,QAAQrB,KAAKC,GAAK,GACvB+K,EAAU7K,IAAIuJ,GAEd,IAAMC,EAAQD,EAAKyB,QACnBxB,EAAM9J,SAASyB,KAAK,KACpBqI,EAAMtI,QAAQrB,KAAKC,IACnB+K,EAAU7K,IAAIwJ,GAEd,IAAMyB,EAAU,IAAIzK,IAAkB,IAAK,IAAK,KAC1C0K,EAAO,IAAIvK,IAAKsK,EAAShP,GAC/B4O,EAAU7K,IAAIkL,GACdA,EAAKxL,SAASC,KAAK,KAEnBpB,EAAaC,EAAeC,KI6HpC0M,CAAStF,KAAKW,MAAOtE,EAAIkI,K,4BAG7B,WACIvE,KAAKnK,OAAOgE,SAASqI,KAAK1M,EAAOI,aAAaC,OAAOgE,UACrDmG,KAAKnK,OAAOwG,GAAG6F,KAAK1M,EAAOI,aAAaC,OAAOwG,IAC/C2D,KAAKlK,SAASiN,OAAOb,KAAK1M,EAAOI,aAAaE,SAASiN,W,yBAO3D,SAAkBhN,GACdiK,KAAKjK,KAAOA,EACZP,EAAOO,KAAOiK,KAAKjK,KAEnBqH,EAAQiD,Y,KC3PVkF,EAAQ,IAAI5F,ECHlB,IAAM6F,EAES,YAFTA,EAOS,YAITC,EAAQ,CACVpJ,GAAI,EACJqJ,OAAQ,GACRpP,MAAO,GACPhB,KAAMkQ,EACNjB,SAAU,GACVoB,SAAU,GACVC,UAAW,GACXC,SAAU,GAEVC,cAAe,CACXC,EAAG,GACHC,EAAG,EACHC,EAAG,EACHC,EAAG,GAEPC,WAAY,ICxBVC,EAAcC,YAAK,CACrBC,IAAK,cACLC,QAAS,KAGPC,EAAiBH,YAAK,CACxBC,IAAK,mBACLC,QAASd,EAAMU,a,0CCNbM,EAAM,CACRC,IAAK,GACLJ,IAAK,GACLvH,GAAI,GACJ4H,GAAI,KAEJC,OAAQ,SAACF,GAAD,OAAUD,EAAIC,IAAMA,GAC5BG,OAAQ,SAACP,GAAD,OAAUG,EAAIH,IAAMA,GAC5BQ,MAAO,SAAC/H,GAAD,OAAS0H,EAAI1H,GAAKA,GACzBgI,YAAY,WAAD,4BAAE,sBAAAnK,EAAA,+EACToK,IAAMC,IAAN,UAAaR,EAAIC,KAAjB,OAAuBD,EAAIH,IAA3B,wBAA8CG,EAAI1H,KAAM3E,MAAK,SAAClB,GAC1DuM,EAAMlB,SAAWrL,EAAKA,KAAKqL,SAC3BkB,EAAME,SAAWzM,EAAKA,KAAKyM,SAC3BF,EAAMG,UAAY1M,EAAKA,KAAK0M,UAC5BH,EAAMpJ,GAAKnD,EAAKA,KAAKmD,GACrBoJ,EAAMnP,MAAQ4C,EAAKA,KAAK5C,MACxBmP,EAAMC,OAASxM,EAAKA,KAAKwM,OACzBD,EAAMK,cAAgB5M,EAAKA,KAAK4M,cAChCL,EAAMU,WAAajN,EAAKA,KAAKiN,WAC7BV,EAAMI,SAAW3M,EAAKA,KAAKgO,MAAMC,MAAK,SAACvK,EAAGC,GAAJ,OAAUD,EAAEP,GAAKQ,EAAER,MAEzDe,EAAQf,GAAKoJ,EAAMpJ,OAZd,2CAAF,kDAAC,GAcZ+K,MAAO,SAACV,GACJ,IAAMC,EAAK,IAAIU,UAAUX,GACzBD,EAAIE,GAAKA,EACTA,EAAGW,OAAS,WACRX,EAAGY,KACCC,KAAKC,UAAU,CACXpN,KAAMtF,EAAiBK,SACvBsS,QAASjB,EAAIH,IACbqB,QAAS,CACLjC,OAAQD,EAAMC,YAK9B,IAAMkC,EAAejB,EAAGkB,UACxBlB,EAAGkB,UAAY,SAAC/J,GACZgK,QAAQC,IAAI,aACRH,GAAcA,EAAa9J,GAC/BgK,QAAQC,IAAIP,KAAKQ,MAAMlK,EAAG5E,SAGlC+O,eAAe,WAAD,4BAAE,WAAOC,GAAP,SAAAtL,EAAA,+EACZoK,IAAMmB,KAAN,UAAc1B,EAAIC,KAAlB,OAAwBD,EAAIH,IAA5B,mBAAkD4B,IADtC,2CAAF,mDAAC,GAEf/H,KAAK,WAAD,4BAAE,WAAOiI,GAAP,SAAAxL,EAAA,+EAAoBoK,IAAMmB,KAAN,UAAc1B,EAAIC,KAAlB,OAAwBD,EAAIH,IAA5B,SAAwC8B,IAA5D,2CAAF,mDAAC,GACLC,UAAU,WAAD,4BAAE,WAAOC,GAAP,SAAA1L,EAAA,+EACPoK,IAAMmB,KAAN,UAAc1B,EAAIC,KAAlB,OAAwBD,EAAIH,IAA5B,UAAyCgC,IADlC,2CAAF,mDAAC,I,yBC3Cd,SAASC,KAAY,IAAD,EACiBC,oBAAS,GAD1B,mBACTC,EADS,KACCC,EADD,OAEgBF,mBAAS,IAFzB,mBAETG,EAFS,KAECC,EAFD,OAGcC,YAAezC,GAH7B,mBAGT0C,EAHS,KAGAC,EAHA,KAIVC,EAAiBC,YAAezC,GAJtB,EAKuBgC,oBAAS,GALhC,mBAKTU,EALS,KAKMC,EALN,KAMVC,EAAUC,iBAAO,MAqBvB,OAnBAC,qBAAU,WACN,IAAMC,EAAe9C,EAAIE,GAAGkB,UAC5BpB,EAAIE,GAAGkB,UAAY,SAAC/J,GAChByL,EAAazL,GADU,MAEG0J,KAAKQ,MAAMlK,EAAG5E,MAAhCmB,EAFe,EAEfA,KAAMsN,EAFS,EAETA,QACVtN,IAAStF,EAAiBM,OAC1B0T,GAAW,SAACD,GAAD,4BACJA,GADI,CAEP,CAAExS,MAAOqR,EAAQrR,MAAOkT,MAAO7B,EAAQ8B,cAE3Cb,EAAY,QAGrB,CAACG,IAEJO,qBAAU,WACNF,EAAQM,QAAQC,UAAYP,EAAQM,QAAQE,eAC7C,CAACd,EAASM,IAGT,uBAAKS,UAAS,UAAKxI,IAAMyI,SAAX,YAAuBzI,IAAMoE,EAAMnP,QAAjD,UACI,sBACIuT,UAAS,UAAKxI,IAAM0I,OAAX,YAAqBtB,EAAWpH,IAAM2I,OAAS,IACxDC,QAAS,SAACnM,GAAD,OAAQ4K,GAAcD,IAFnC,oBAKA,iCACI,sBAAKoB,UAAS,UAAKxI,IAAM6I,SAAWC,IAAKf,EAAzC,SACKF,EACKJ,EAAQtR,KAAI,SAAC4S,EAAK5P,GAAN,OACR,sBAEIqP,UAAS,UAAKxI,IAAMgJ,IAAX,YACLhJ,IAAM+I,EAAI9T,OADL,YAGL8T,EAAI9T,QAAUmP,EAAMnP,MACd+K,IAAMiJ,KACN,GALD,YAML7B,EAAW,GAAKpH,IAAMkJ,UAR9B,SASKH,EAAIZ,OARAY,EAAIZ,MAAQhP,MAWzBwO,EAAexR,KAAI,SAACgT,EAAGhQ,GAAJ,OACf,sBAEIqP,UAAS,UAAKxI,IAAMgJ,IAAX,YAAkBhJ,IAAMmJ,EAAElU,OAA1B,YACLkU,EAAElU,QAAUmP,EAAMnP,MAAQ+K,IAAMiJ,KAAO,GADlC,YAGL7B,EAAW,GAAKpH,IAAMkJ,UAL9B,mBAMYC,EAAEzM,OANd,OAMsByM,EAAEpK,MANxB,OAM+BoK,EAAE5L,OALxBpE,EAAMgQ,EAAEzM,YAQ/B,uBACI8L,UAAS,UAAKxI,IAAMoJ,eAAX,cACLhC,EAAW,GAAKpH,IAAMkJ,UAF9B,UAII,sBAAKV,UAAS,UAAKxI,IAAMqJ,cAAzB,SACKxB,EAAgB,eAAO,iBAE5B,wBACIW,UAAS,UAAKxI,IAAMsJ,OACpBC,SAAU,SAAC9M,GACFoL,GACLN,EAAY9K,EAAGiF,OAAOyG,QAE1BqB,UAAW,SAAC/M,GAEO,UAAXA,EAAGwI,KACH4C,GACa,KAAbP,EAEAlC,EAAIE,GAAGY,KACHC,KAAKC,UAAU,CACXpN,KAAMtF,EAAiBM,KACvBqS,QAASjB,EAAIH,IACbqB,QAAS,CACLjC,OAAQD,EAAMC,OACd+D,QAASd,MAIH,QAAX7K,EAAGwI,MACVxI,EAAGgN,iBACH3B,GAAeD,KAGvBM,MAAOb,EACPoC,YAAa,+C,0CChGrC,SAASC,GAAchT,EAAKsE,EAAGC,EAAG5E,EAAOC,EAAQqT,EAAQC,GACrDlT,EAAImT,YACJnT,EAAIoT,OAAO9O,EAAGC,EAAI0O,GAClBjT,EAAIqT,OAAO/O,EAAGC,EAAI3E,EAASqT,GAC3BjT,EAAIsT,IAAIhP,EAAI2O,EAAQ1O,EAAI0O,EAASrT,EAAQqT,EAAQjR,KAAKC,GAAID,KAAKC,GAAK,GAAG,GACvEjC,EAAIqT,OAAO/O,EAAI3E,EAAQsT,EAAQ1O,EAAI3E,GACnCI,EAAIsT,IACAhP,EAAI2O,EAAStT,EACb4E,EAAI0O,EAASrT,EACbqT,EACAjR,KAAKC,GAAK,EACV,GACA,GAEJjC,EAAIqT,OAAO/O,EAAI3E,EAAO4E,EAAI0O,GAC1BjT,EAAIsT,IAAIhP,EAAI2O,EAAStT,EAAO4E,EAAI0O,EAAQA,EAAQ,GAAIjR,KAAKC,GAAK,GAAG,GACjEjC,EAAIqT,OAAO/O,EAAI2O,EAAQ1O,GACvBvE,EAAIsT,IAAIhP,EAAI2O,EAAQ1O,EAAI0O,EAAQA,GAASjR,KAAKC,GAAK,GAAID,KAAKC,IAAI,GAChEjC,EAAIuT,SAEAL,IACAlT,EAAIK,UAAY,sBAChBL,EAAIwT,QAIZ,SAASC,GAAT,GAQI,IAPAjR,EAOD,EAPCA,IACAlE,EAMD,EANCA,MACA4C,EAKD,EALCA,KACAwS,EAID,EAJCA,aACAC,EAGD,EAHCA,gBACAC,EAED,EAFCA,YACAC,EACD,EADCA,eAEM1B,EAAMd,iBAAO,MACb/T,EAAO2T,YAAe6C,IACtB5M,EAAWmK,iBAAO,CACpBnU,MAAO,CAAC,UAAW,UAAWH,EAAmBG,OACjDC,KAAM,CAAC,UAAW,UAAWJ,EAAmBI,MAChDH,IAAK,CAAC,UAAW,UAAWD,EAAmBC,KAC/CC,OAAQ,CAAC,UAAW,UAAWF,EAAmBE,UA+BtD,OA5BAqU,qBAAU,WACN,IAAMtR,EAAMmS,EAAIT,QAAQzR,WAAW,MAE7BC,EAAMF,EAAIG,qBAAqB,EAAG,EAAG,IAAK,KAChDD,EAAIE,aAAa,EAAG8G,EAASwK,QAAQpT,GAAO,IAC5C4B,EAAIE,aAAa,EAAG8G,EAASwK,QAAQpT,GAAO,IAC5C0B,EAAIK,UAAYH,EAChBF,EAAIM,SAAS,EAAG,EAAG,IAAK,KAExBN,EAAI+T,UAAY,EAChB/T,EAAIgU,YAAc,sBAElB,IAAK,IAAIjR,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIkR,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAIf,GAAS,EACThS,EAAK,KAAO6B,GAAK7B,EAAK,KAAO+S,IAAGf,GAAS,GAC7CF,GACIhT,EACA,GAAKiU,EAAI,IAAMA,EAAI,GACnB,GAAKlR,EAAI,IAAMA,EAAI,GACnB,GACA,GACA,EACAmQ,MAIb,CAAC5U,EAAO4C,IAEP,yBACI2Q,UAAS,UAAKxI,KAAMjB,KAAX,YACL5F,IAAQkR,EAAerK,KAAM6K,SAAW,GADnC,YAEL1R,IAAQkR,EAAe,EAAIrK,KAAM8K,aAAe,GAF3C,YAGL3R,IAAQoR,EAAcvK,KAAM+K,QAAU,GAHjC,YAIL5R,IAAQoR,EAAc,EAAIvK,KAAMgL,YAAc,IAClD1U,MAAO,IACPC,OAAQ,IACRyJ,MAAO,CACHqC,KAAY,IAANlJ,EAAY,KAClB8R,YACI9R,IAAQkR,EACFxM,EAASwK,QAAQpT,GAAO,GACxB,uBAEd2T,QAAS,SAACnM,GACFxI,EAAKuP,QAAQ,QAAS,MAAQY,EAAMnP,OACpCqV,EAAgBnR,IAGxB+R,eAAgB,SAACzO,GAAD,OAAQ+N,EAAerR,IACvCgS,eAAgB,SAAC1O,GAAD,OAAQ+N,GAAgB,IACxC1B,IAAKA,ICnGjB,IAAMsC,GAAYpG,YAAK,CACnBC,IAAK,aACLC,QAAQ,YAAKd,EAAME,YAEjB+G,GAAmBC,YAAS,CAC9BrG,IAAK,YACLW,IAAK,mBAAaA,EAAb,EAAGA,KAAcwF,KACtBzJ,IAAK,YAA8C,IAA3CA,EAA0C,EAA1CA,IAAO4J,EAAmC,mEAApBnH,EAAME,UAChCF,EAAME,SAAWiH,EACjB5J,EAAIyJ,GAAWG,MAIjBC,GAAkBxG,YAAK,CACzBC,IAAK,oBACLC,QAAQ,YAAKd,EAAMG,aAGjBkH,GAAyBH,YAAS,CACpCrG,IAAK,mBACLW,IAAK,mBAAaA,EAAb,EAAGA,KAAc4F,KACtB7J,IAAK,YAAoD,IAAjDA,EAAgD,EAAhDA,IAAY4J,GAAoC,EAA3C3F,IAA2C,mEAArBxB,EAAMG,YACrCH,EAAMG,UAAYgH,EAClB5J,EAAI6J,GAAiBD,MAIvBG,GAAoB1G,YAAK,CAC3BE,QAASd,EAAMK,cACfQ,IAAK,qBAGH0G,GAAc3G,YAAK,CACrBE,QAAS,GACTD,IAAK,kBCtBT,SAAS2G,KAAa,IAAD,IACepE,YAAe6D,IAD9B,mBACV/G,EADU,KACAuH,EADA,OAE2BrE,YACxCiE,IAHa,mBAEVK,EAFU,KAEMC,EAFN,OAKqBvE,YAAekE,IALpC,mBAKVjH,EALU,KAKKuH,EALL,OAMuB7E,oBAAU,GANjC,mBAMVkD,EANU,KAMIC,EANJ,OAOqBnD,oBAAU,GAP/B,mBAOVoD,EAPU,KAOGC,EAPH,OAQyBrD,oBAAU,GARnC,mBAQV8E,EARU,KAQKC,EARL,OAS2B/E,mBAAS,IATpC,mBASVgF,EATU,KASMC,EATN,OAUoBjF,oBAAS,GAV7B,mBAUVkF,EAVU,KAUKC,EAVL,OAWa9E,YAAemE,IAX5B,mBAWVY,EAXU,KAWDC,EAXC,KAYXC,EAAU7E,YAAe8E,IACzBzY,EAAO2T,YAAe6C,IAEtBkC,EAAiD,IAAvCjS,OAAOC,KAAKyJ,EAAMI,UAAUhN,OAAe,EAAI,EAM/DyQ,qBAAU,WACFwE,IACAZ,EAAY,YAAIzH,EAAME,WACtByH,EAAkB,YAAI3H,EAAMG,eAEjC,CAACkI,EAASZ,EAAaE,IAE1B9D,qBAAU,WACD6D,EAAetU,QAAUvD,IAASkQ,GACnCC,EAAMnP,QAAUhB,EAAKuP,QAAQ,QAAS,MAE1CrP,EAAOQ,YAAcmX,EAAeG,GAAiB7H,EAAMnP,MAC3D8G,EAAQ0C,kBACRH,EAAMC,WAAW7K,MAClB,CAACuY,EAAeH,EAAgB7X,IAEnCgU,qBAAU,WACD3D,EAAS9M,QAAUvD,IAASkQ,GAC7BC,EAAMnP,QAAUhB,EAAKuP,QAAQ,QAAS,MAE1CrP,EAAOS,WAAa0P,EAAS+F,GAC7BtO,EAAQ0C,kBACRH,EAAMC,WAAW7K,MAClB,CAAC2W,EAAc/F,EAAUrQ,IAE5BgU,qBAAU,WACN,IAAM2E,EACG,6FADHA,EAEI,+DAFJA,EAGK,yDAHLA,EAIG,2EAGTnG,QAAQC,IAAIzS,GAERA,IAASkQ,EACTqI,EAAWI,GACJ3Y,EAAK4Y,SAAS,QACjBzI,EAAMnP,QAAUhB,EAAKuP,QAAQ,QAAS,IACtCsJ,YAAW,WACPxC,EAAgB,GAChB4B,EAAiB,GACjBM,EAAWI,GACXN,GAAY,KACb,KAEHQ,YAAW,WACPN,EAAWI,KACZ,KAEA3Y,IAASkQ,GAChBqI,EAAWI,KAEhB,CAAC3Y,EAAMuY,IAEV,IA2FMO,GAAS,oBACV5I,EACG,sBACIqE,UAAS,UAAKxI,KAAMgN,OAAX,YAAqBhN,KAAMoE,EAAMnP,OAAjC,YACLoX,EAAgBrM,KAAMiN,QAAU,IAEpCrE,QAjGS,WACjB,IAAIyD,EACJ,GAAIF,EAAe3U,OAASmV,EACxBH,EAAW,qBAAQG,EAAU,0BADjC,CAKAL,GAAY,GAEZ,IAAMY,EAAYf,EAAehW,KAAI,SAACgX,GAAD,OAAWlV,SAASkV,MAAQrH,OAC3DsH,EAAW,CAAE1I,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAClCJ,EAAa,gBAAQL,EAAMK,eAEjCyI,EAAUtS,SAAQ,SAACyS,GAAD,OAAUD,EAASC,IAAQ,KAC7C,IAAK,IAAI3T,EAAI,EAAGA,EAAI,EAAGA,IACnB+K,EAAc/K,GAAK+K,EAAc/K,GAAK0T,EAAS1T,GAGnD,IAAMmN,EAAW,CACbxC,OAAQD,EAAMC,OACdiJ,WAAYJ,EACZK,UAAW9I,GAGfW,EAAIwB,eAAeC,GACd9N,MAAK,WACFgT,EAAkBmB,GAClB9I,EAAMK,cAAN,gBAA2BA,GAC3BuH,EAAa5H,EAAMK,eACnB2H,EAAkB,IAClBI,EAAW,oDACX/F,QAAQC,IAAItC,MAEfoJ,OAAM,WACHhB,EAAW,oDACXM,YAAW,WACPN,EAAW,MACZ,KACHF,GAAY,QAuDhB,uCAFO,sBAWP,sBACI9D,UAAS,UAAKxI,KAAMgN,OAAX,YAAqBhN,KAAMoE,EAAMnP,OAAjC,YACLoX,EAAgBrM,KAAMiN,QAAU,IAEpCrE,QAAS,SAACnM,GACF4P,GAjEP,WACT,IAAM3P,EAAQoP,EAAeG,GAAiB7H,EAAMnP,MAC9C8J,EAAOuF,EAAS+F,GAChB9M,EAAOpJ,EAAOU,WAEpB,GAAa,KAAT0I,EAAa,CACb,IAAMkQ,EAASlB,EAMf,OALAC,EAAW,uCACXM,YAAW,WACPN,EAAWiB,KACZ,KAVQ,kBAeAtZ,EAAOW,QAfP,GAeRmG,EAfQ,KAeLC,EAfK,KAgBTgI,EAAWiD,KAAKQ,MAAMR,KAAKC,UAAUhC,EAAMlB,WACjDA,EAAS3F,GAAMtC,GAAGC,GAAGhD,KAAKwE,GAE1B,IAAMgR,EAAWtJ,EAAME,SAASqJ,QAC5B,SAACN,EAAKlU,GAAN,OAAcA,IAAQkR,KAEpBiD,EAAalJ,EAAMG,UAAUoJ,QAC/B,SAACN,EAAKlU,GAAN,OAAcA,IAAQ8S,KAGpB2B,EAAO,CACTvJ,OAAQD,EAAMC,OACd3H,QACAqC,OACAxB,OACAmQ,WACAJ,aACApK,YAGJkC,EAAItG,KAAK8O,GAAM7U,MAAK,SAAClB,GACjB,IAAMgW,EAAUhW,EAAKA,KAGrBkE,EAAQ2C,mBAERmN,EAAYgC,GACZ9B,EAAkBuB,GAClBhD,GAAiB,GACjB4B,GAAkB,MAsBVpN,IAPR,uCAXO,uBAuBJ,IAvBI,GA0BTgP,EAAiB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAG3X,KAAI,SAACgD,GAAD,OAC1C,sBAEIqP,UAAS,UAAKxI,KAAMmN,MAAX,YAAoBnN,KAAMoE,EAAMnP,OAAhC,YACLkE,IAAQ8S,EAAgBjM,KAAM6K,SAAW,IAE7CjC,QAAS,SAACnM,GACFxI,EAAKuP,QAAQ,QAAS,MAAQY,EAAMnP,OACpC6W,EAAe3S,IAAM+S,EAAiB/S,IAPlD,SASK2S,EAAe3S,GACZ,sBACI4U,IAAG,iBAAYjC,EAAe3S,GAA3B,QACH6U,IAAG,eAAUlC,EAAe3S,MAGhC,sBAAKqP,UAAS,UAAKxI,KAAMiO,gBAdxB9U,MAmBP+U,GAAe,SAACC,GAAD,OACjB,IAAIC,MAAM3J,EAAc0J,IAAQhE,OAAOhU,KAAI,SAACkX,EAAKlU,GAAN,OACvC,sBACIqP,UAAS,UAAKxI,KAAMmN,MAAX,aAAqBnN,KAAMoE,EAAMnP,OAAjC,YACLkX,EAAeU,SAAf,UAA2BsB,EAA3B,YAAoChV,IAC9B6G,KAAM6K,SACN,IAGVjC,QAAS,SAACnM,GACN,GAAIxI,IAASkQ,IAAkBkI,EAC/B,GAAIF,EAAeU,SAAf,UAA2BsB,EAA3B,YAAoChV,IACpCiT,EACID,EAAewB,QACX,SAACU,GAAD,OAAOA,IAAC,UAAQF,EAAR,YAAiBhV,WAG9B,CACH,GAAIgT,EAAe3U,QAAUmV,EAAS,OACtCP,EAAkB,GAAD,mBACVD,GADU,WAEVgC,EAFU,YAEDhV,QAIxB6G,MAAO,CACHsO,WAAYnV,EAAM,IAAM,EAAI,GAAK,QACjCoV,aAAc,SAzBtB,SA2BI,sBAAKR,IAAG,iBAAYI,EAAZ,QAAyBH,IAAG,eAAUG,MArBzChV,OAyBXqV,GAAgB9T,OAAOC,KAAK8J,GAC7BqB,OACA3P,KAAI,SAACgY,GAEF,OACI,sBAAiB3F,UAAS,UAAKxI,KAAMkO,cAArC,SACKA,GAAaC,IADRA,MAMtB,OACI,uCACI,uBAAK3F,UAAS,UAAKxI,KAAMyO,SAAzB,UACI,uBAAKjG,UAAS,UAAKxI,KAAM+I,KAAzB,UACI,+BAAMwD,IACN,sBAAK/D,UAAS,UAAKxI,KAAM0O,SAAX,YAAuB1O,KAAMoE,EAAMnP,QAAjD,uBAIJ,sBAAKuT,UAAS,UAAKxI,KAAM2O,SAAzB,SACK5B,EAAU9Y,KACNA,EAAKuP,QAAQ,QAAS,MAAQY,EAAMnP,MAC/B8X,EAAU6B,KACV7B,EAAU8B,YAG5B,uBAAKrG,UAAS,UAAKxI,KAAM8O,MAAzB,UACI,sBAAKtG,UAAS,UAAKxI,KAAM+O,UAAzB,SACKzK,EAASnO,KAAI,SAAC0B,EAAMsB,GAAP,OACV,eAACiR,GAAD,CACIjR,IAAKA,EACLtB,KAAMA,EACN5C,MAAOmP,EAAMnP,MACboV,aAAcA,EACdE,YAAaA,EACbD,gBAAiBA,EACjBE,eAAgBA,GAPpB,UAQYrR,EARZ,YAQmBtB,SAI3B,uBAAK2Q,UAAS,UAAKxI,KAAMgP,WAAzB,UACI,sBAAKxG,UAAS,UAAKxI,KAAM8N,gBAAzB,SACKA,IAEL,sBAAKtF,UAAS,UAAKxI,KAAMwO,eAAzB,SACKA,cCrTzB,ICGMS,GAAejK,YAAK,CACtBE,QAASd,EAAMI,SACfS,IAAK,mB,oBCIT,SAASiK,KACL,IAAMC,EAAWvH,YAAeqH,IAC1Bhb,EAAO2T,YAAe6C,IAFX,EAGWtD,mBAAS,IAHpB,mBAGVwB,EAHU,KAGFyG,EAHE,KAejBnH,qBAAU,WACNxB,QAAQC,IAAIyI,KACb,CAACA,IAEJlH,qBAAU,WAEN,GADAxB,QAAQC,IAAI,cACRzS,IAASkQ,EAAb,CAEA,IAAMkL,EFhCI,SAACnM,GACfuD,QAAQC,IAAIxD,GACZ,IAAMoM,EAAS,CACX3b,IAAK,EACLG,KAAM,EACND,MAAO,EACPD,OAAQ,GAIN2b,EAAU,CACZhZ,OAAQ,EACRtB,MAAO,IAgEX,OA7DAyF,OAAOC,KAAKuI,GAAUtI,SAAQ,SAAC4U,GAU3B,IATA,IAAMjS,EAAO2F,EAASsM,GAEhBC,EAAU,CACZ9b,IAAK,EACLG,KAAM,EACND,MAAO,EACPD,OAAQ,GAP0B,WAU7BqH,GACL,IAXkC,eAWzBC,GACL,IAAIwU,EAAW,GACXnZ,EAAS,EAWb,GATAgH,EAAKtC,GAAGC,GAAGN,SAAQ,SAAC8B,EAAOvD,GAAS,IAAD,EACG,CAC9BlB,SAASyE,GACTA,EAAMzD,OAAO,IAFG0W,EADW,KAM/BpZ,GAN+B,KAO3B4C,IAAQoE,EAAKtC,GAAGC,GAAG1D,OAAS,IAAGkY,EAAWC,OAE7CD,EAAU,iBAEXnZ,EAASgZ,EAAQhZ,QACjBgZ,EAAQhZ,OAASA,EACjBgZ,EAAQta,MAAQya,GACTnZ,IAAWgZ,EAAQhZ,SAC1BgZ,EAAQta,MAAQ,IAGpBwa,EAAQC,IAAa,EACrBJ,EAAOI,IAAa,GAvBfxU,EAAI,EAAGA,EAAI,IAAKA,EAAG,EAAnBA,IADJD,EAAI,EAAGA,EAAI,IAAKA,EAAI,EAApBA,GA4BT,IAAM2U,EAAY,CACd3a,MAAO,GACP4a,IAAK,GAGT,IAAK,IAAItU,KAAKkU,EACNA,EAAQlU,GAAKqU,EAAUC,KACvBD,EAAU3a,MAAQsG,EAClBqU,EAAUC,IAAMJ,EAAQlU,IACjBkU,EAAQlU,KAAOqU,EAAUC,MAChCD,EAAU3a,MAAQ,IAItB2a,EAAU3a,QACVqa,EAAOM,EAAU3a,QAAU,MAI/Bsa,EAAQta,QACRqa,EAAOC,EAAQta,QAAU,GAGtBqa,EE5CWQ,CAAU1L,EAAMlB,UAC9BkC,EAAI4B,UAAU,CACV3C,OAAQD,EAAMC,OACdgL,MAAOA,EAAMjL,EAAMnP,SACpB8D,MAAK,WACJ0N,QAAQC,IAAI,SAEhBD,QAAQC,IAAI2I,MACb,CAACpb,IAQJ,OACI,sBAAKuU,UAAS,UAAKxI,KAAM+P,MAAzB,SACKZ,EAAShZ,KAAI,SAAC6Z,GAAD,OACV,uBAEIxH,UAAS,UAAKxI,KAAMgQ,EAAK/a,OAAhB,YAA0B+K,KAAMiQ,WACzCrH,SAZK3T,EAYgB+a,EAAK/a,MAZX,SAACwH,GAC5B,IAAMyT,EAAS,gBAAQvH,GACvBuH,EAAUjb,IAASib,EAAUjb,GAC7Bma,EAAUc,KAMF,UAII,uBAAK1H,UAAS,UAAKxI,KAAMmQ,KAAzB,UACI,sBAAK3H,UAAS,UAAKxI,KAAMoQ,QAAzB,SACKnc,EAAKuP,QAAQ,QAAS,MAAQwM,EAAK/a,MAChC,uCACI,sBACIuT,UAAS,UAAKxI,KAAMqQ,iBAAX,YAA+BrQ,KAAMsQ,QAClD,sBACI9H,UAAS,UAAKxI,KAAMqQ,uBAE5B,OAER,sBAAK7H,UAAS,UAAKxI,KAAMuQ,SAAzB,qCACWP,EAAKhV,GADhB,8BACyBgV,EAAKX,YAGlC,sBACI7G,UAAS,UAAKxI,KAAMmN,MAAX,YACLxE,EAAOqH,EAAK/a,OAAS,GAAK+K,KAAMwQ,MAFxC,SAIKR,EAAKzL,UAAUpO,KAAI,SAACgX,EAAOhU,GAAR,OAChB,sBAEI4U,IAAG,iBAAYZ,EAAZ,QACHa,IAAG,eAAUb,IAFRhU,QAMjB,sBACIqP,UAAS,UAAKxI,KAAMmN,MAAX,YACLxE,EAAOqH,EAAK/a,OAAS,GAAK+K,KAAMwQ,MAFxC,SAIK9V,OAAOC,KAAKqV,EAAKvL,eACbqB,OACA3P,KAAI,SAACsa,GAAD,OACD,uBAEIjI,UAAS,UAAKxI,KAAMuN,WAFxB,UAGI,sBACIQ,IAAG,iBAAY0C,EAAZ,QACHzC,IAAG,eAAUyC,KAEjB,+BAAMT,EAAKvL,cAAcgM,OANpBA,UAtChBT,EAAK/a,OAVN,IAACA,O,wBChCzB,SAASyb,KACL,IAAM5H,EAAMd,iBAAO,MACb/T,EAAO2T,YAAe6C,IACtBkG,EAAgBC,YAAkBzL,GAClC0L,EAAcD,YAAkB3B,IA8CtC,OA5CAhH,qBAAU,WXPd,IAAmBrJ,EAAI5D,EAAIkI,EAARtE,EWQDkK,EAAIT,QXRCrN,EWQQoJ,EAAMpJ,GXRVkI,EWQckB,EAAMlB,SXP3CgB,EAAM4M,KAAKlS,GACXsF,EAAM6M,UAAU/V,EAAIkI,GAEpBnH,EAAQqB,MAAMwB,EAAIsF,EAAMlI,WWMpB,IAAMuK,EAAenB,EAAIE,GAAGkB,UAC5BpB,EAAIE,GAAGkB,UAAY,SAAC/J,GAChBgK,QAAQC,IAAI,eACRH,GAAcA,EAAa9J,GAFR,MAGG0J,KAAKQ,MAAMlK,EAAG5E,MAAhCmB,EAHe,EAGfA,KAAMsN,EAHS,EAGTA,QAEd,GAAItN,IAAStF,EAAiBO,KAAM,CAKhC,GAJIqS,EAAQxB,aACR6L,EAAcrK,EAAQxB,YACtBV,EAAMU,WAAawB,EAAQxB,YAE3BwB,EAAQxH,KAAM,CAAC,IAAD,EACoBwH,EAAQxH,KAAlCpC,EADM,EACNA,MAAOqC,EADD,EACCA,KAAMxB,EADP,EACOA,KAAMvC,EADb,EACaA,GAC3Be,EAAQ+C,KAAKpC,EAAOqC,EAAMxB,EAAMvC,GAEhCsL,EAAQpD,WACRkB,EAAMlB,SAAWoD,EAAQpD,UAEzBoD,EAAQT,QACRzB,EAAMI,SAAWJ,EAAMI,SAASrO,KAAI,SAAC6Z,EAAM7W,GACvC,IAAM6X,EAAU1K,EAAQT,MAAMpI,MAC1B,SAACwT,GAAD,OAAQA,EAAGhc,QAAU+a,EAAK/a,SAI9B,OADS,6BAAQ+a,GAASgB,MAI9BH,EAAYzM,EAAMI,eAI/B,CAACmM,EAAeE,IAEnB5I,qBAAU,WACFhU,EAAKuP,QAAQ,QAAS,MAAQY,EAAMnP,MACpCqJ,EAAMC,WAAW7K,GAEjB4K,EAAMC,WAAW7K,KAEtB,CAACO,IACG,sBAAK6U,IAAKA,EAAKN,UAAS,UAAKxI,KAAMkR,SChD9C,IAAMxE,GAAY1H,YAAK,CACnBE,SAAS,EACTD,IAAK,eAGHwF,GAAWzF,YAAK,CAClBC,IAAK,YACLC,QAASd,EAAMnQ,OAgEJkd,OA7Df,WAAgB,IAAD,EACgB3J,YAAekF,IAD/B,mBACJD,EADI,KACK2E,EADL,KAELC,EAAUT,YAAkBnG,IAC5B+B,EAAaoE,YAAkBjF,IAC/BgF,EAAgBC,YAAkBzL,GAClC0L,EAAcD,YAAkB3B,IAChCqC,EAAmBV,YAAkBlF,IAwC3C,OAtCAzD,qBAAU,WACN,IAAM5B,EAAU9F,OAAOgR,SAASC,SAASC,MAAM,KAAK,GAC9CpN,EAAS9D,OAAOgR,SAASG,OAAOD,MAAM,KAAK,GAEjDrM,EAAIG,OAAO,0BACXH,EAAII,OAAOa,GACXjB,EAAIK,MAAMpB,GACVe,EAAIM,cACC3M,MAAK,WACFqY,GAAQ,GACRhM,EAAIW,MAAM,wBACV4K,EAAcvM,EAAMU,YACpB+L,EAAYzM,EAAMI,UAClB8M,EAAiBlN,EAAMK,kBAE1B1L,MAAK,SAAClB,GACH,IAAM0O,EAAenB,EAAIE,GAAGkB,UAC5BpB,EAAIE,GAAGkB,UAAY,SAAC/J,GAChBgK,QAAQC,IAAI,aACZH,EAAa9J,GAFU,MAGG0J,KAAKQ,MAAMlK,EAAG5E,MAAhCmB,EAHe,EAGfA,KAAMsN,EAHS,EAGTA,QAEVtN,IAAStF,EAAiBO,OAC1Bod,EAAQ/K,EAAQrS,MAChBmQ,EAAMnQ,KAAOqS,EAAQrS,YAKtC,CACCmd,EACAC,EACA7E,EACAqE,EACAF,EACAW,IAIA,sBAAK9I,UAAU,MAAf,SACKiE,EACG,uCACI,eAACvF,GAAD,IACA,eAAC0E,GAAD,IACA,eAACsD,GAAD,IACA,eAACwB,GAAD,OAEJ,QCvEhBiB,IAAS1O,OACL,eAAC,IAAM2O,WAAP,UACI,eAAC,IAAD,UACI,eAAC,GAAD,QAGRnb,SAASob,eAAe,W","file":"static/js/main.c1f4831a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dash\":\"dashBoard_dash__19ntG\",\"cardArea\":\"dashBoard_cardArea__1_Nj5\",\"chessArea\":\"dashBoard_chessArea__jqoS0\",\"roundChessArea\":\"dashBoard_roundChessArea__2QkXr\",\"chess\":\"dashBoard_chess__AXCt1\",\"chessHolder\":\"dashBoard_chessHolder__1fKsh\",\"leftChessArea\":\"dashBoard_leftChessArea___yuio\",\"rowChessArea\":\"dashBoard_rowChessArea__2oB3z\",\"card\":\"dashBoard_card__3Bty0\",\"hoveredNext\":\"dashBoard_hoveredNext__1dtDG\",\"selectedNext\":\"dashBoard_selectedNext__uMRXU\",\"hovered\":\"dashBoard_hovered__Qb2h_\",\"selected\":\"dashBoard_selected__1h8gJ\",\"red\":\"dashBoard_red__5htZ_\",\"green\":\"dashBoard_green__3_YAL\",\"blue\":\"dashBoard_blue__3JkBp\",\"yellow\":\"dashBoard_yellow__3I3q2\",\"btnBars\":\"dashBoard_btnBars__NBazI\",\"msg\":\"dashBoard_msg__1hn6L\",\"btnArea\":\"dashBoard_btnArea___iJ27\",\"submit\":\"dashBoard_submit__25qR5\",\"pressed\":\"dashBoard_pressed__2KrWz\",\"backView\":\"dashBoard_backView__3DUXG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatroom\":\"chatroom_chatroom__1yhX-\",\"symbol\":\"chatroom_symbol__1am2s\",\"red\":\"chatroom_red__162bV\",\"spread\":\"chatroom_spread__3Tz5u\",\"yellow\":\"chatroom_yellow__1HQhG\",\"green\":\"chatroom_green__3xdpz\",\"blue\":\"chatroom_blue__2bvqZ\",\"inputContainer\":\"chatroom_inputContainer__3Baar\",\"channelTitle\":\"chatroom_channelTitle__33wYq\",\"input\":\"chatroom_input__3HwWM\",\"popList\":\"chatroom_popList__3SHvF\",\"pop\":\"chatroom_pop__Vk0Ea\",\"self\":\"chatroom_self__3USxl\",\"collapse\":\"chatroom_collapse__yFzh2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"infoPanel_info__30wGd\",\"userboard\":\"infoPanel_userboard__3U2_Y\",\"pin\":\"infoPanel_pin__2OwTM\",\"avatar\":\"infoPanel_avatar__3GWxq\",\"red\":\"infoPanel_red__qHI6l\",\"yellow\":\"infoPanel_yellow__dphaG\",\"blue\":\"infoPanel_blue__10QMT\",\"green\":\"infoPanel_green__3Cv9m\",\"pointerContainer\":\"infoPanel_pointerContainer__2hRCA\",\"long\":\"infoPanel_long__119oW\",\"waiting\":\"infoPanel_waiting__2WYkP\",\"infoRow\":\"infoPanel_infoRow__1WQs7\",\"chess\":\"infoPanel_chess__ug-4Y\",\"hide\":\"infoPanel_hide__35cb-\",\"leftChess\":\"infoPanel_leftChess__1MZxQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stage\":\"stage_stage__BJpJC\"};","const constant = {\n    VIEW_MODE: 0,\n    OPER_MODE: 1,\n\n    TEMP_FLOOR: 0,\n    REAL_FLOOR: 1,\n\n    CITY_GROUP: 'city',\n    AREA_GROUP: 'area',\n    BUILDING_GROUP: 'building',\n    GRID_GROUP: 'grid',\n    FLOOR_GROUP: 'floor',\n\n    COLOR_MAP: {\n        red: '#f5e1da',\n        yellow: '#ffe194',\n        green: '#c9e4c5',\n        blue: '#d0e8f2',\n    },\n    WS_TYPE: {\n        setColor: 'setColor',\n        chat: 'chat',\n        step: 'step',\n        error: 'error',\n    },\n}\n\nconst status = {\n    areas: [],\n    buildings: [],\n    floors: [],\n    oriViewState: {\n        camera: {},\n        controls: {},\n    },\n    mode: constant.VIEW_MODE,\n    playedChess: '',\n    playedCard: [],\n    playedArea: '',\n    truePos: [],\n}\n\nexport { status, constant }\n","import {\n    BackSide,\n    CanvasTexture,\n    Color,\n    DoubleSide,\n    MeshBasicMaterial,\n    MeshLambertMaterial,\n    TextureLoader,\n} from 'three'\nimport { constant } from './status'\n\nconst girdMatrial = new MeshLambertMaterial({\n    color: new Color('rgb(255,255,255)'),\n})\n\nconst girdMatrial0 = new MeshLambertMaterial({\n    alphaMap: new TextureLoader().load('./alpha.png'),\n    transparent: true,\n    depthWrite: false,\n})\n\nconst chessMatrialMap = {\n    red: new MeshLambertMaterial({ color: constant.COLOR_MAP.red }),\n    yellow: new MeshLambertMaterial({ color: constant.COLOR_MAP.yellow }),\n    green: new MeshLambertMaterial({ color: constant.COLOR_MAP.green }),\n    blue: new MeshLambertMaterial({ color: constant.COLOR_MAP.blue }),\n}\n\nconst tempChessMaterialMap = {\n    red: new MeshLambertMaterial({\n        color: constant.COLOR_MAP.red,\n        transparent: true,\n        opacity: 0.5,\n    }),\n    yellow: new MeshLambertMaterial({\n        color: constant.COLOR_MAP.yellow,\n        transparent: true,\n        opacity: 0.5,\n    }),\n    green: new MeshLambertMaterial({\n        color: constant.COLOR_MAP.green,\n        transparent: true,\n        opacity: 0.5,\n    }),\n    blue: new MeshLambertMaterial({\n        color: constant.COLOR_MAP.blue,\n        transparent: true,\n        opacity: 0.5,\n    }),\n}\n\nconst windowMaterial = new MeshLambertMaterial({\n    color: 0xffffff,\n    opacity: 0.8,\n    transparent: true,\n    emissive: 0xffffff,\n    emissiveIntensity: 1,\n    side: DoubleSide,\n})\n\nconst skyMaterial = new MeshBasicMaterial({\n    map: generateTexture('#9cacd0', '#e3c3cb', 512, 256),\n    side: BackSide,\n})\n\nfunction generateTexture(color1, color2, width, height) {\n    const cav = document.createElement('canvas')\n    cav.height = height\n    cav.width = width\n    const ctx = cav.getContext('2d')\n    const gra = ctx.createLinearGradient(0, 0, 0, height)\n    gra.addColorStop(0, color2)\n    gra.addColorStop(0.9, color1)\n\n    ctx.fillStyle = gra\n    ctx.fillRect(0, 0, width, height)\n\n    return new CanvasTexture(cav)\n}\nexport {\n    girdMatrial,\n    girdMatrial0,\n    chessMatrialMap,\n    tempChessMaterialMap,\n    windowMaterial,\n    skyMaterial,\n}\n","import {\n    AxesHelper,\n    BoxBufferGeometry,\n    Group,\n    Mesh,\n    PlaneBufferGeometry,\n    Vector3,\n} from 'three'\nimport {\n    chessMatrialMap,\n    girdMatrial,\n    girdMatrial0,\n    tempChessMaterialMap,\n    windowMaterial,\n} from './material'\n\nimport { constant, status } from './status'\n\n/**\n *\n * @param {Scene} scene\n */\nconst drawCity = (scene, up, cityData) => {\n    const cityGroup = new Group()\n    cityGroup.userData.type = constant.CITY_GROUP\n    scene.add(cityGroup)\n\n    //axes\n    const axesHelper = new AxesHelper(10000)\n    cityGroup.add(axesHelper)\n    window.axesHelper = axesHelper\n\n    const areaIds = Object.keys(cityData)\n\n    for (let id of areaIds) {\n        const area = cityData[id]\n        const areaGroup = new Group()\n        areaGroup.userData.id = id\n        areaGroup.userData.type = constant.AREA_GROUP\n\n        const idNum = parseInt(id.replace('area', ''))\n        areaGroup.position.setX((idNum % 3) * 3600 - 3600)\n        areaGroup.position.setY(1800 - parseInt(idNum / 3) * 3600)\n        areaGroup.position.setZ(0)\n\n        //up rotate\n        areaGroup.rotateZ((up / 4) * Math.PI * 2)\n\n        cityGroup.add(areaGroup)\n        status.areas.push(areaGroup)\n\n        for (let x = 0; x < 3; x++) {\n            for (let y = 0; y < 3; y++) {\n                const buildingData = [...area[x][y]]\n\n                const buildingGroup = new Group()\n                buildingGroup.userData.id = `${id}-${x}-${y}`\n                buildingGroup.userData.data = []\n                buildingGroup.userData.type = constant.BUILDING_GROUP\n\n                areaGroup.add(buildingGroup)\n                status.buildings.push(buildingGroup)\n\n                const positionVec = new Vector3(\n                    y * 1100 - 1100,\n                    1100 - x * 1100,\n                    0\n                )\n                buildingGroup.position.copy(positionVec)\n\n                const gridGroup = new Group()\n                gridGroup.userData.type = constant.GRID_GROUP\n                buildingGroup.add(gridGroup)\n                gridGroup.position.setZ(-550)\n\n                const top = new Mesh(\n                    new PlaneBufferGeometry(1000, 1000),\n                    girdMatrial\n                )\n                top.position.setZ(450)\n                gridGroup.add(top)\n\n                const front = new Mesh(\n                    new PlaneBufferGeometry(1000, 1000),\n                    girdMatrial0\n                )\n                front.position.set(0, -500, -50)\n                front.rotateZ(Math.PI)\n                front.rotateX(-Math.PI / 2)\n                gridGroup.add(front)\n\n                const back = front.clone()\n                back.position.setY(500)\n                back.rotateY(Math.PI)\n                gridGroup.add(back)\n\n                const left = front.clone()\n                left.position.setY(0)\n                left.position.setX(-500)\n                left.rotateY(Math.PI / 2)\n                gridGroup.add(left)\n\n                const right = left.clone()\n                right.position.setX(500)\n                right.rotateY(Math.PI)\n                gridGroup.add(right)\n\n                const gridGeo = new BoxBufferGeometry(900, 900, 100)\n                const grid = new Mesh(gridGeo, girdMatrial)\n                gridGroup.add(grid)\n                grid.position.setZ(500)\n\n                drawBuilding(buildingGroup, buildingData)\n            }\n        }\n    }\n}\n\n/**\n *\n * @param {Group} buildingGroup building group\n * @param {[string]} buildingData\n */\nconst drawBuilding = (buildingGroup, buildingData) => {\n    if (!buildingData.length) return\n\n    const floorData = buildingData.shift()\n    const oriHeight =\n        buildingGroup.userData.data.reduce(\n            (pre, cur) => pre + parseInt(cur),\n            0\n        ) * 500\n\n    buildingGroup.userData.data.push(floorData)\n\n    return new Promise((res, rej) => {\n        const floorGroup = generateFloor(floorData)\n\n        floorGroup.position.setZ(oriHeight + (500 * parseInt(floorData)) / 2)\n\n        if ((oriHeight / 500) % 2) {\n            if (parseInt(floorData) % 2) {\n                floorGroup.rotateX(Math.PI)\n            } else {\n                buildingGroup.children[\n                    buildingGroup.children.length - 1\n                ].rotateX(Math.PI)\n            }\n        }\n\n        status.floors.push(floorGroup)\n        buildingGroup.add(floorGroup)\n        res()\n    }).then(() => drawBuilding(buildingGroup, buildingData))\n}\n\n/**\n * 与drawBuilding不同之处在于，这个方法直接传入生成好的floorGroup，并且不会改动status里的citydata，也不会改动buildingGroup的userdata\n * @param {Group} buildingGroup\n * @param {Group} floor\n */\nconst addFloor = (buildingGroup, floor) => {\n    const oriHeight =\n        buildingGroup.userData.data.reduce(\n            (pre, cur) => pre + parseInt(cur),\n            0\n        ) * 500\n    const floorData = floor.userData.data\n\n    buildingGroup.add(floor)\n    floor.position.setZ(oriHeight + (500 * parseInt(floorData)) / 2)\n    floor.rotateX(((oriHeight / 500) % 2) * Math.PI)\n}\n\n/**\n *\n * @param {Group} buildingGroup\n * @param {Group} floor\n */\nconst removeFloor = (buildingGroup, floor) => {\n    buildingGroup.remove(floor)\n}\n\n/**\n *\n * @param {string} floorData\n * @param {} type\n * @returns {Group}\n */\nconst generateFloor = (floorData, type = constant.REAL_FLOOR) => {\n    const [colorType, idx] = [floorData.substr(1), parseInt(floorData)]\n    const floorGroup = new Group()\n\n    floorGroup.userData.type = constant.FLOOR_GROUP\n    floorGroup.userData.data = floorData\n\n    const geo = new BoxBufferGeometry(900, 900, 500 * idx)\n    const mat =\n        type === constant.REAL_FLOOR\n            ? chessMatrialMap[colorType]\n            : tempChessMaterialMap[colorType]\n    const mesh = new Mesh(geo, mat)\n    floorGroup.add(mesh)\n\n    for (let i = 0; i < 4; i++) {\n        for (let f = 0; f < idx; f++) {\n            const plane = new PlaneBufferGeometry(200, 200)\n            const planeMat = windowMaterial\n            const win = new Mesh(plane, planeMat)\n            floorGroup.add(win)\n\n            win.rotateX(Math.PI / 2)\n            win.rotateY(((i % 2) * Math.PI) / 2)\n\n            win.position.setZ(f * 500 - idx * 250 + 250)\n\n            switch (i) {\n                case 0:\n                    win.position.setX((f % 2) * 450 - 225)\n                    win.position.setY(-451)\n                    break\n                case 1:\n                    win.position.setX(451)\n                    win.position.setY((f % 2) * 450 - 225)\n                    break\n                case 2:\n                    win.position.setX(((f + 1) % 2) * 450 - 225)\n                    win.position.setY(451)\n                    break\n                case 3:\n                    win.position.setX(-451)\n                    win.position.setY(((f + 1) % 2) * 450 - 225)\n                    break\n                default:\n            }\n        }\n    }\n\n    return floorGroup\n}\n\nexport { drawCity, drawBuilding, generateFloor, addFloor, removeFloor }\n","const utils = {\n    disposeAll(obj) {\n        // console.log(obj)\n        if (!obj) return\n\n        while (obj.children.length > 0) {\n            utils.disposeAll(obj.children[0])\n            obj.remove(obj.children[0])\n        }\n        if (obj.geometry) obj.geometry.dispose()\n\n        if (obj.material) {\n            //in case of map, bumpMap, normalMap, envMap ...\n            Object.keys(obj.material).forEach((prop) => {\n                if (!obj.material[prop]) return\n                if (\n                    obj.material[prop] !== null &&\n                    typeof obj.material[prop].dispose === 'function'\n                )\n                    obj.material[prop].dispose()\n            })\n            obj.material.dispose()\n        }\n    },\n\n    rotateUp(pos, up) {\n        const [x, y] = pos\n        const corner = [\n            [0, 0],\n            [0, 2],\n            [2, 2],\n            [2, 0],\n        ]\n        const middle = [\n            [0, 1],\n            [1, 2],\n            [2, 1],\n            [1, 0],\n        ]\n\n        const cornerIdx = corner.findIndex(([a, b]) => a === x && b === y)\n        const middleIdx = middle.findIndex(([a, b]) => a === x && b === y)\n\n        if (middleIdx !== -1) {\n            return middle[(middleIdx + Number(up)) % 4]\n        } else if (cornerIdx !== -1) {\n            return corner[(cornerIdx + Number(up)) % 4]\n        } else {\n            return pos\n        }\n    },\n}\n\nexport { utils }\n","import TWEEN, { Tween } from '@tweenjs/tween.js'\nimport { Board } from './Board'\nimport { checkBuildable } from './calc'\nimport { addFloor, drawBuilding, generateFloor, removeFloor } from './draw'\nimport { constant, status } from './status'\nimport { utils } from './utils'\n\nconst findGroup = (object, groupType) => {\n    if (!object.parent) return null\n\n    if (object.type === 'Group' && object.userData.type === groupType) {\n        return object\n    } else {\n        return findGroup(object.parent, groupType)\n    }\n}\n\nconst operate = {\n    raycaster: null,\n    intersectObject: null,\n    tempFloor: null,\n    pointerDownTime: 0,\n    up: 0,\n\n    choose(objs, type) {\n        const subMesh = operate.raycaster.intersectObjects(objs, true)[0]\n            ?.object\n\n        if (!subMesh) return null\n\n        return findGroup(subMesh, type)\n    },\n\n    handleViewModeMove(ev) {\n        if (status.mode === constant.OPER_MODE) return\n\n        const floor = operate.choose(status.floors, constant.FLOOR_GROUP)\n\n        if (operate.intersectObject === floor) return\n\n        if (operate.intersectObject) {\n            const tweenShrink = new Tween(operate.intersectObject.scale)\n                .easing(TWEEN.Easing.Circular.In)\n                .to({ x: 1, y: 1, z: 1 }, 150)\n            tweenShrink.start()\n        }\n\n        if (floor) {\n            const tweenSpread = new Tween(floor.scale)\n                .easing(TWEEN.Easing.Circular.Out)\n                .to({ x: 1.1, y: 1.1, z: 1.1 }, 150)\n            tweenSpread.start()\n        }\n        operate.intersectObject = floor\n    },\n\n    handleOperModeMove(ev) {\n        if (status.mode === constant.VIEW_MODE) return\n\n        if (!operate.tempFloor) return\n\n        const area = operate.choose(status.areas, constant.AREA_GROUP)\n\n        if (operate.intersectObject === area) return\n\n        const [x, y] = utils.rotateUp(status.playedCard, operate.up)\n        // const [x, y] = status.playedCard\n\n        if (operate.intersectObject) {\n            const preBuilding = operate.intersectObject.children.find(\n                (b) =>\n                    b.userData.id ===\n                    `${operate.intersectObject.userData.id}-${x}-${y}`\n            )\n            removeFloor(preBuilding, operate.tempFloor)\n        }\n\n        if (area) {\n            const building = area.children.find(\n                (b) => b.userData.id === `${area.userData.id}-${x}-${y}`\n            )\n            if (\n                checkBuildable(\n                    building.userData.data,\n                    operate.tempFloor.userData.data\n                )\n            ) {\n                addFloor(building, operate.tempFloor)\n            }\n        }\n        operate.intersectObject = area\n    },\n\n    handlePointerUp(ev) {\n        const time = ev.timeStamp - operate.pointerDownTime\n        if (time >= 120) return\n\n        if (ev.button === 0) {\n            if (status.mode === constant.VIEW_MODE) return\n\n            if (operate.intersectObject) {\n                status.playedArea = operate.intersectObject.userData.id\n                status.truePos = utils.rotateUp(status.playedCard, operate.up)\n                Board.changeMode(constant.VIEW_MODE)\n            }\n        } else if (ev.button === 2) {\n            Board.changeMode(constant.OPER_MODE)\n        }\n    },\n    handlePointerDown(ev) {\n        operate.pointerDownTime = ev.timeStamp\n    },\n\n    createTempFloor() {\n        if (!status.playedCard?.length && !status.playedChess) return\n\n        operate.disposeTempFloor()\n\n        const floorData = status.playedChess\n        const floor = generateFloor(floorData, constant.TEMP_FLOOR)\n        this.tempFloor = floor\n    },\n\n    disposeTempFloor() {\n        if (operate.tempFloor) {\n            if (operate.tempFloor.parent)\n                operate.tempFloor.parent.remove(operate.tempFloor)\n            utils.disposeAll(operate.tempFloor)\n            // operate.tempFloor = null\n        }\n    },\n\n    /**\n     *\n     * @param {HTMLElement} el\n     * @param {Raycaster} raycaster\n     */\n    start(el, raycaster) {\n        operate.raycaster = raycaster\n        el.addEventListener('pointermove', operate.handleViewModeMove)\n        el.addEventListener('pointermove', operate.handleOperModeMove)\n        el.addEventListener('pointerdown', this.handlePointerDown)\n        el.addEventListener('pointerup', this.handlePointerUp)\n    },\n\n    play(floor, card, area, up) {\n        const buildingData = [floor]\n        const [x, y] = utils.rotateUp(card, up)\n        const buildingGroup = status.buildings.find(\n            (building) => building.userData.id === `${area}-${x}-${y}`\n        )\n\n        drawBuilding(buildingGroup, buildingData)\n    },\n\n    reset() {\n        operate.pointerDownTime = 0\n        operate.intersectObject = null\n    },\n}\n\nexport { operate }\n","const checkBuildable = (buildingData, floorData) => {\n    const parseFloorData = (data) => [data.substr(1), parseInt(data)]\n\n    const colorMap = {\n        red: 0,\n        yellow: 0,\n        blue: 0,\n        green: 0,\n        max: 0,\n    }\n\n    for (let data of buildingData) {\n        const [color, height] = parseFloorData(data)\n        colorMap[color] += height\n\n        if (colorMap[color] >= colorMap.max) {\n            colorMap.max = colorMap[color]\n        }\n    }\n\n    const [newColor, newHeight] = parseFloorData(floorData)\n\n    if (colorMap[newColor] + newHeight >= colorMap.max) return true\n    else return false\n}\n\nexport { checkBuildable }\n","import {\n    Color,\n    PerspectiveCamera,\n    Scene,\n    WebGLRenderer,\n    DirectionalLight,\n    HemisphereLight,\n    Vector3,\n    OrthographicCamera,\n    Vector2,\n    SphereBufferGeometry,\n    Mesh,\n    Raycaster,\n} from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\n\nimport { constant, status } from './status'\nimport { drawCity } from './draw'\nimport { skyMaterial } from './material'\nimport TWEEN from '@tweenjs/tween.js'\nimport { operate } from './operate'\n\nclass Board {\n    el\n    renderer\n    camera\n    secondViewCamera\n    scene\n    controls\n    raycaster\n    mouse\n    mode\n\n    /**\n     *\n     * @param {HTMLElement} el\n     */\n    init(el) {\n        this.renderer = this.initRenderer(el)\n        this.camera = this.initCamera()\n        this.secondViewCamera = this.initSecondViewCamera()\n        this.scene = this.initScene()\n        this.controls = this.initControls()\n        this.mouse = new Vector2()\n        this.raycaster = this.initRaycaster()\n        this.mode = constant.VIEW_MODE\n\n        this.initLights()\n        this.initEvents()\n        this.initSky()\n\n        this.update()\n    }\n\n    /**\n     *\n     * @param {HTMLElement} el\n     * @returns {WebGLRenderer} renderer\n     */\n    initRenderer(el) {\n        const cav = document.createElement('canvas')\n        cav.style.height = '100vh'\n        cav.style.width = '100vw'\n        el.appendChild(cav)\n\n        const renderer = new WebGLRenderer({\n            canvas: cav,\n            antialias: true,\n            autoClear: false,\n        })\n\n        renderer.setPixelRatio(window.devicePixelRatio)\n        renderer.setSize(window.innerWidth, window.innerHeight)\n\n        return renderer\n    }\n\n    /**\n     *\n     * @returns {PerspectiveCamera}\n     */\n    initCamera() {\n        const camera = new PerspectiveCamera(\n            75,\n            window.innerWidth / window.innerHeight,\n            100,\n            1000000\n        )\n        window.camera = camera\n        camera.up.copy(new Vector3(0, 0, 1))\n        camera.position.setY(-11000)\n        camera.position.setZ(2000)\n\n        status.oriViewState.camera = {\n            position: new Vector3().copy(camera.position),\n            up: new Vector3(0, 0, 1),\n        }\n        return camera\n    }\n\n    initSecondViewCamera() {\n        const camera = new OrthographicCamera(\n            window.innerWidth / -2,\n            window.innerWidth / 2,\n            window.innerHeight / 2,\n            window.innerHeight / -2,\n            10,\n            1000000\n        )\n        camera.up.copy(new Vector3(0, 0, 1))\n        camera.position.copy(new Vector3(-2000, 0, 500))\n        camera.lookAt(new Vector3(0, 0, 0))\n        camera.zoom = 0.1\n        return camera\n    }\n\n    /**\n     *\n     * @returns {Scene}\n     */\n    initScene() {\n        const scene = new Scene()\n        scene.background = new Color('rgb(31,50,104)')\n        return scene\n    }\n\n    /**\n     *\n     * @returns {OrbitControls}\n     */\n    initControls() {\n        const controls = new OrbitControls(\n            this.camera,\n            this.renderer.domElement\n        )\n        controls.screenSpacePanning = false\n        controls.enableDamping = true\n        controls.dampingFactor = 0.1\n        controls.maxPolarAngle = Math.PI / 2\n\n        controls.target.set(0, 0, 2000)\n        status.oriViewState.controls = {\n            target: new Vector3().copy(controls.target),\n        }\n\n        return controls\n    }\n\n    initLights() {\n        const light0 = new HemisphereLight(\n            // new Color(0xd8c0cb),\n            new Color(0xf7d7d6),\n            new Color(0xa6afd0),\n            0.9\n        )\n        light0.position.set(0, 0, 1)\n        this.scene.add(light0)\n\n        const light2 = new DirectionalLight(new Color(0xffffff), 0.25)\n        light2.position.copy(new Vector3(1, -2, 2))\n        this.scene.add(light2)\n\n        const light3 = new DirectionalLight(new Color(0xe3e3e3), 0.15)\n        light3.position.copy(new Vector3(-1, 2, 0))\n        this.scene.add(light3)\n    }\n\n    initSky() {\n        const geo = new SphereBufferGeometry(20000, 64, 64)\n        const mat = skyMaterial\n        const mesh = new Mesh(geo, mat)\n        mesh.rotateX(Math.PI / 2)\n        this.scene.add(mesh)\n    }\n\n    initEvents() {\n        window.onresize = (ev) => {\n            this.camera.aspect = window.innerWidth / window.innerHeight\n            this.camera.updateProjectionMatrix()\n\n            this.secondViewCamera.left = window.innerWidth / -2\n            this.secondViewCamera.right = window.innerWidth / 2\n            this.secondViewCamera.top = window.innerHeight / -2\n            this.secondViewCamera.bottom = window.innerHeight / 2\n\n            this.renderer.setSize(window.innerWidth, window.innerHeight)\n        }\n        window.onpointermove = (event) => {\n            this.mouse.x = (event.clientX / window.innerWidth) * 2 - 1\n            this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1\n        }\n    }\n\n    initRaycaster() {\n        const raycaster = new Raycaster()\n        raycaster.setFromCamera(this.mouse, this.camera)\n        return raycaster\n    }\n\n    setOpt(opt) {}\n\n    update() {\n        requestAnimationFrame(() => this.update())\n        TWEEN.update()\n\n        this.controls.update()\n        this.raycaster.setFromCamera(this.mouse, this.camera)\n\n        // this.renderer.setScissorTest(true)\n\n        // this.renderer.setViewport(0, 0, window.innerWidth, window.innerHeight)\n        // this.renderer.setScissor(0, 0, window.innerWidth, window.innerHeight)\n        // this.composer.render()\n\n        this.renderer.render(this.scene, this.camera)\n\n        // this.renderer.setViewport(\n        //     (window.innerWidth * 4) / 5,\n        //     (window.innerHeight * 4) / 5,\n        //     window.innerWidth / 5,\n        //     window.innerHeight / 5\n        // )\n        // this.renderer.setScissor(\n        //     (window.innerWidth * 4) / 5,\n        //     (window.innerHeight * 4) / 5,\n        //     window.innerWidth / 5,\n        //     window.innerHeight / 5\n        // )\n\n        // this.secondViewCamera.updateProjectionMatrix()\n        // this.composer.render(\n        //     window.axesHelper || this.scene,\n        //     this.secondViewCamera\n        // )\n    }\n\n    drawBoard(up, cityData) {\n        drawCity(this.scene, up, cityData)\n    }\n\n    resetViewState() {\n        this.camera.position.copy(status.oriViewState.camera.position)\n        this.camera.up.copy(status.oriViewState.camera.up)\n        this.controls.target.copy(status.oriViewState.controls.target)\n    }\n\n    /**\n     *\n     * @param {string} mode constant.VIEW_MODE | constant.VIEW_MODE\n     */\n    static changeMode(mode) {\n        this.mode = mode\n        status.mode = this.mode\n\n        operate.reset()\n\n        // if (mode === constant.OPER_MODE) {\n        //     if (!operate.tempFloor) operate.createTempFloor()\n        // }\n    }\n}\n\nexport { Board }\n","import { Board } from './Board'\nimport { operate } from './operate'\n\nconst board = new Board()\n\n/**\n *\n * @param {HTMLElement} el\n */\nfunction startGame(el, up, cityData) {\n    board.init(el)\n    board.drawBoard(up, cityData)\n\n    operate.start(el, board.raycaster)\n}\n\nexport { board, startGame, Board }\n","const STEP = {\n    waiting: 'waiting',\n    pre_round: 'pre_round',\n    red_turn: 'red_turn',\n    yellow_turn: 'yellow_turn',\n    blue_turn: 'blue_turn',\n    green_turn: 'green_turn',\n    round_end: 'round_end',\n    end: 'game_end',\n}\n\nconst store = {\n    up: 0,\n    userId: '',\n    color: '',\n    step: STEP.pre_round,\n    cityData: {},\n    cardData: [],\n    chessData: [],\n    userList: [],\n\n    leftChessData: {\n        1: 11,\n        2: 6,\n        3: 4,\n        4: 3,\n    },\n    playedData: {},\n}\n\nexport { store, STEP }\n","import { atom } from 'recoil'\nimport { store } from '../store'\n\nconst msgListAtom = atom({\n    key: 'msgListStom',\n    default: [],\n})\n\nconst playedDataAtom = atom({\n    key: 'played-data-atom',\n    default: store.playedData,\n})\n\nexport { msgListAtom, playedDataAtom }\n","import axios from 'axios'\nimport { store } from './components/store'\nimport { constant, operate } from './game'\n\nconst net = {\n    url: '',\n    key: '',\n    id: '',\n    ws: null,\n\n    setUrl: (url) => (net.url = url),\n    setKey: (key) => (net.key = key),\n    setId: (id) => (net.id = id),\n    getInitData: async () =>\n        axios.get(`${net.url}${net.key}/data?userId=${net.id}`).then((data) => {\n            store.cityData = data.data.cityData\n            store.cardData = data.data.cardData\n            store.chessData = data.data.chessData\n            store.up = data.data.up\n            store.color = data.data.color\n            store.userId = data.data.userId\n            store.leftChessData = data.data.leftChessData\n            store.playedData = data.data.playedData\n            store.userList = data.data.users.sort((a, b) => a.up - b.up)\n\n            operate.up = store.up\n        }),\n    setWs: (url) => {\n        const ws = new WebSocket(url)\n        net.ws = ws\n        ws.onopen = () => {\n            ws.send(\n                JSON.stringify({\n                    type: constant.WS_TYPE.setColor,\n                    roomKey: net.key,\n                    payload: {\n                        userId: store.userId,\n                    },\n                })\n            )\n        }\n        const preOnmessage = ws.onmessage\n        ws.onmessage = (ev) => {\n            console.log('net.js 44')\n            if (preOnmessage) preOnmessage(ev)\n            console.log(JSON.parse(ev.data))\n        }\n    },\n    postRoundChess: async (postData) =>\n        axios.post(`${net.url}${net.key}/postRoundChess`, postData),\n    play: async (playData) => axios.post(`${net.url}${net.key}/play`, playData),\n    postScore: async (scoreData) =>\n        axios.post(`${net.url}${net.key}/score`, scoreData),\n}\n\nexport { net }\n","import { useState, useRef, useEffect } from 'react'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { constant } from '../../game'\nimport { msgListAtom, playedDataAtom } from './data'\nimport { net } from '../../net'\nimport { store } from '../store'\nimport style from './chatroom.module.css'\n\nfunction Chatroom() {\n    const [isSpread, toggleSpread] = useState(false)\n    const [inputMsg, setInputMsg] = useState('')\n    const [msgList, setMsgList] = useRecoilState(msgListAtom)\n    const playedDataList = useRecoilValue(playedDataAtom)\n    const [isChatChannel, toggleChannel] = useState(true)\n    const listRef = useRef(null)\n\n    useEffect(() => {\n        const preOnMessage = net.ws.onmessage\n        net.ws.onmessage = (ev) => {\n            preOnMessage(ev)\n            const { type, payload } = JSON.parse(ev.data)\n            if (type === constant.WS_TYPE.chat) {\n                setMsgList((msgList) => [\n                    ...msgList,\n                    { color: payload.color, value: payload.message },\n                ])\n                setInputMsg('')\n            }\n        }\n    }, [setMsgList])\n\n    useEffect(() => {\n        listRef.current.scrollTop = listRef.current.scrollHeight\n    }, [msgList, listRef])\n\n    return (\n        <div className={`${style.chatroom} ${style[store.color]}`}>\n            <div\n                className={`${style.symbol} ${isSpread ? style.spread : ''}`}\n                onClick={(ev) => toggleSpread(!isSpread)}>\n                &#xe901;\n            </div>\n            <div>\n                <div className={`${style.popList}`} ref={listRef}>\n                    {isChatChannel\n                        ? msgList.map((msg, idx) => (\n                              <div\n                                  key={msg.value + idx}\n                                  className={`${style.pop} ${\n                                      style[msg.color]\n                                  } ${\n                                      msg.color === store.color\n                                          ? style.self\n                                          : ''\n                                  } ${isSpread ? '' : style.collapse}`}>\n                                  {msg.value}\n                              </div>\n                          ))\n                        : playedDataList.map((d, idx) => (\n                              <div\n                                  key={idx + d.floor}\n                                  className={`${style.pop} ${style[d.color]} ${\n                                      d.color === store.color ? style.self : ''\n                                  } ${\n                                      isSpread ? '' : style.collapse\n                                  }`}>{`${d.floor}${d.card}${d.area}`}</div>\n                          ))}\n                </div>\n                <div\n                    className={`${style.inputContainer}   ${\n                        isSpread ? '' : style.collapse\n                    }`}>\n                    <div className={`${style.channelTitle}`}>\n                        {isChatChannel ? '聊天' : '记录'}\n                    </div>\n                    <input\n                        className={`${style.input}`}\n                        onChange={(ev) => {\n                            if (!isChatChannel) return\n                            setInputMsg(ev.target.value)\n                        }}\n                        onKeyDown={(ev) => {\n                            if (\n                                ev.key === 'Enter' &&\n                                isChatChannel &&\n                                inputMsg !== ''\n                            ) {\n                                net.ws.send(\n                                    JSON.stringify({\n                                        type: constant.WS_TYPE.chat,\n                                        roomKey: net.key,\n                                        payload: {\n                                            userId: store.userId,\n                                            message: inputMsg,\n                                        },\n                                    })\n                                )\n                            } else if (ev.key === 'Tab') {\n                                ev.preventDefault()\n                                toggleChannel(!isChatChannel)\n                            }\n                        }}\n                        value={inputMsg}\n                        placeholder={'按tab切换频道'}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport { Chatroom, msgListAtom, playedDataAtom }\n","import { useEffect, useRef } from 'react'\nimport { useRecoilValue } from 'recoil'\nimport { stepAtom } from '../../App'\nimport { constant } from '../../game'\nimport { store } from '../store'\nimport style from './dashBoard.module.css'\n\nfunction drawRoundRect(ctx, x, y, width, height, radius, isFill) {\n    ctx.beginPath()\n    ctx.moveTo(x, y + radius)\n    ctx.lineTo(x, y + height - radius)\n    ctx.arc(x + radius, y - radius + height, radius, Math.PI, Math.PI / 2, true)\n    ctx.lineTo(x + width - radius, y + height)\n    ctx.arc(\n        x - radius + width,\n        y - radius + height,\n        radius,\n        Math.PI / 2,\n        0,\n        true\n    )\n    ctx.lineTo(x + width, y + radius)\n    ctx.arc(x - radius + width, y + radius, radius, 0, -Math.PI / 2, true)\n    ctx.lineTo(x + radius, y)\n    ctx.arc(x + radius, y + radius, radius, -Math.PI / 2, -Math.PI, true)\n    ctx.stroke()\n\n    if (isFill) {\n        ctx.fillStyle = 'rgba(255,255,255,1)'\n        ctx.fill()\n    }\n}\n\nfunction Card({\n    idx,\n    color,\n    data,\n    selectedCard,\n    setSelectedCard,\n    hoveredCard,\n    setHoveredCard,\n}) {\n    const ref = useRef(null)\n    const step = useRecoilValue(stepAtom)\n    const colorMap = useRef({\n        green: ['#aac9ce', '#f3dbcd', constant.COLOR_MAP.green],\n        blue: ['#c9bbcb', '#aac9ce', constant.COLOR_MAP.blue],\n        red: ['#e5c1cd', '#f3dbcf', constant.COLOR_MAP.red],\n        yellow: ['#f3dbcf', '#c9bbcb', constant.COLOR_MAP.yellow],\n    })\n\n    useEffect(() => {\n        const ctx = ref.current.getContext('2d')\n\n        const gra = ctx.createLinearGradient(0, 0, 192, 192)\n        gra.addColorStop(0, colorMap.current[color][0])\n        gra.addColorStop(1, colorMap.current[color][1])\n        ctx.fillStyle = gra\n        ctx.fillRect(0, 0, 192, 192)\n\n        ctx.lineWidth = 4\n        ctx.strokeStyle = 'rgba(255,255,255,1)'\n\n        for (let i = 0; i < 3; i++) {\n            for (let j = 0; j < 3; j++) {\n                let isFill = false\n                if (data[0] === i && data[1] === j) isFill = true\n                drawRoundRect(\n                    ctx,\n                    44 * j + 15 * (j + 1),\n                    44 * i + 15 * (i + 1),\n                    44,\n                    44,\n                    8,\n                    isFill\n                )\n            }\n        }\n    }, [color, data])\n    return (\n        <canvas\n            className={`${style.card} ${\n                idx === selectedCard ? style.selected : ''\n            } ${idx === selectedCard + 1 ? style.selectedNext : ''} ${\n                idx === hoveredCard ? style.hovered : ''\n            } ${idx === hoveredCard + 1 ? style.hoveredNext : ''}`}\n            width={192}\n            height={192}\n            style={{\n                left: idx * 100 + 'px',\n                borderColor:\n                    idx === selectedCard\n                        ? colorMap.current[color][2]\n                        : 'rgba(255,255,255,1)',\n            }}\n            onClick={(ev) => {\n                if (step.replace('_turn', '') === store.color) {\n                    setSelectedCard(idx)\n                }\n            }}\n            onPointerEnter={(ev) => setHoveredCard(idx)}\n            onPointerLeave={(ev) => setHoveredCard(-2)}\n            ref={ref}></canvas>\n    )\n}\n\nexport { Card }\n","import { atom, selector } from 'recoil'\nimport { store } from '../store'\n\nconst _cardData = atom({\n    key: '_card-data',\n    default: [...store.cardData],\n})\nconst cardDataSelector = selector({\n    key: 'card-data',\n    get: ({ get }) => get(_cardData),\n    set: ({ set }, newValue = [...store.cardData]) => {\n        store.cardData = newValue\n        set(_cardData, newValue)\n    },\n})\n\nconst _roundChessData = atom({\n    key: '_round-chess-data',\n    default: [...store.chessData],\n})\n\nconst roundChessDataSelector = selector({\n    key: 'round-chess-data',\n    get: ({ get }) => get(_roundChessData),\n    set: ({ set, get }, newValue = [...store.chessData]) => {\n        store.chessData = newValue\n        set(_roundChessData, newValue)\n    },\n})\n\nconst leftChessDataAtom = atom({\n    default: store.leftChessData,\n    key: '_left-chess-data',\n})\n\nconst tempMsgAtom = atom({\n    default: '',\n    key: 'temp-msg-atom',\n})\n\nexport {\n    cardDataSelector,\n    roundChessDataSelector,\n    leftChessDataAtom,\n    tempMsgAtom,\n}\n","import { useEffect, useState } from 'react'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { readyAtom, stepAtom } from '../../App'\nimport { Board, constant, operate, status } from '../../game'\nimport { net } from '../../net'\nimport { STEP, store } from '../store'\nimport { Card } from './Card'\nimport style from './dashBoard.module.css'\nimport {\n    cardDataSelector,\n    leftChessDataAtom,\n    roundChessDataSelector,\n    tempMsgAtom,\n} from './data'\n\nfunction DashBoard() {\n    const [cardData, setCardData] = useRecoilState(cardDataSelector)\n    const [roundChessData, setRoundChessData] = useRecoilState(\n        roundChessDataSelector\n    )\n    const [leftChessData, setLeftChess] = useRecoilState(leftChessDataAtom)\n    const [selectedCard, setSelectedCard] = useState(-2)\n    const [hoveredCard, setHoveredCard] = useState(-2)\n    const [selectedChess, setSelectedChess] = useState(-2)\n    const [tempRoundChess, setTempRoundChess] = useState([])\n    const [submitPressed, pressSubmit] = useState(false)\n    const [tempMsg, setTempMsg] = useRecoilState(tempMsgAtom)\n    const isReady = useRecoilValue(readyAtom)\n    const step = useRecoilValue(stepAtom)\n\n    const userNum = Object.keys(store.userList).length === 3 ? 4 : 6\n\n    // useEffect(() => {\n    //     console.log(roundChessData, leftChessData)\n    // }, [roundChessData, leftChessData])\n\n    useEffect(() => {\n        if (isReady) {\n            setCardData([...store.cardData])\n            setRoundChessData([...store.chessData])\n        }\n    }, [isReady, setCardData, setRoundChessData])\n\n    useEffect(() => {\n        if (!roundChessData.length || step === STEP.pre_round) return\n        if (store.color !== step.replace('_turn', '')) return\n\n        status.playedChess = roundChessData[selectedChess] + store.color\n        operate.createTempFloor()\n        Board.changeMode(constant.OPER_MODE)\n    }, [selectedChess, roundChessData, step])\n\n    useEffect(() => {\n        if (!cardData.length || step === STEP.pre_round) return\n        if (store.color !== step.replace('_turn', '')) return\n\n        status.playedCard = cardData[selectedCard]\n        operate.createTempFloor()\n        Board.changeMode(constant.OPER_MODE)\n    }, [selectedCard, cardData, step])\n\n    useEffect(() => {\n        const stepMsg = {\n            pre: '请选择本阶段游戏你所选用的棋子',\n            your: '你的回合，请摆放建筑',\n            other: '现在是其他人的回合',\n            end: '本阶段结束，你的分数是：',\n        }\n\n        console.log(step)\n\n        if (step === STEP.pre_round) {\n            setTempMsg(stepMsg.pre)\n        } else if (step.includes('turn')) {\n            if (store.color === step.replace('_turn', '')) {\n                setTimeout(() => {\n                    setSelectedCard(0)\n                    setSelectedChess(0)\n                    setTempMsg(stepMsg.your)\n                    pressSubmit(false)\n                }, 100)\n            } else {\n                setTimeout(() => {\n                    setTempMsg(stepMsg.other)\n                }, 100)\n            }\n        } else if (step === STEP.round_end) {\n            setTempMsg(stepMsg.end)\n        }\n    }, [step, setTempMsg])\n\n    const endReadyStep = () => {\n        if (submitPressed) return\n        if (tempRoundChess.length < userNum) {\n            setTempMsg('请选择' + userNum + '个棋子')\n            return\n        }\n\n        pressSubmit(true)\n\n        const chessList = tempRoundChess.map((chess) => parseInt(chess)).sort()\n        const chessMap = { 1: 0, 2: 0, 3: 0, 4: 0 }\n        const leftChessData = { ...store.leftChessData }\n\n        chessList.forEach((val) => (chessMap[val] += 1))\n        for (let i = 1; i < 5; i++) {\n            leftChessData[i] = leftChessData[i] - chessMap[i]\n        }\n\n        const postData = {\n            userId: store.userId,\n            roundChess: chessList,\n            leftChess: leftChessData,\n        }\n\n        net.postRoundChess(postData)\n            .then(() => {\n                setRoundChessData(chessList)\n                store.leftChessData = { ...leftChessData }\n                setLeftChess(store.leftChessData)\n                setTempRoundChess([])\n                setTempMsg('正在等待其他玩家')\n                console.log(store)\n            })\n            .catch(() => {\n                setTempMsg('网络问题，请重试')\n                setTimeout(() => {\n                    setTempMsg('')\n                }, 3000)\n                pressSubmit(false)\n            })\n    }\n\n    const play = () => {\n        const floor = roundChessData[selectedChess] + store.color\n        const card = cardData[selectedCard]\n        const area = status.playedArea\n\n        if (area === '') {\n            const preMsg = tempMsg\n            setTempMsg('请选择城区')\n            setTimeout(() => {\n                setTempMsg(preMsg)\n            }, 3000)\n\n            return\n        }\n\n        const [x, y] = status.truePos\n        const cityData = JSON.parse(JSON.stringify(store.cityData))\n        cityData[area][x][y].push(floor)\n\n        const leftCard = store.cardData.filter(\n            (val, idx) => idx !== selectedCard\n        )\n        const roundChess = store.chessData.filter(\n            (val, idx) => idx !== selectedChess\n        )\n\n        const body = {\n            userId: store.userId,\n            floor,\n            card,\n            area,\n            leftCard,\n            roundChess,\n            cityData,\n        }\n\n        net.play(body).then((data) => {\n            const newCard = data.data\n            // status.playedChess = floor\n            // status.playedCard = card\n            operate.disposeTempFloor()\n            // operate.play(floor, card, area, store.up)\n            setCardData(newCard)\n            setRoundChessData(roundChess)\n            setSelectedCard(-2)\n            setSelectedChess(-2)\n        })\n    }\n\n    const submitBtn = {\n        [STEP.pre_round]: (\n            <div\n                className={`${style.submit} ${style[store.color]} ${\n                    submitPressed ? style.pressed : ''\n                }`}\n                onClick={endReadyStep}>\n                结束准备\n            </div>\n        ),\n        your: (\n            <div\n                className={`${style.submit} ${style[store.color]} ${\n                    submitPressed ? style.pressed : ''\n                }`}\n                onClick={(ev) => {\n                    if (submitPressed) return\n                    // pressSubmit(true)\n                    play()\n                }}>\n                结束回合\n            </div>\n        ),\n        other: '',\n    }\n\n    const roundChessArea = [0, 1, 2, 3, 4, 5].map((idx) => (\n        <div\n            key={idx}\n            className={`${style.chess} ${style[store.color]} ${\n                idx === selectedChess ? style.selected : ''\n            }`}\n            onClick={(ev) => {\n                if (step.replace('_turn', '') !== store.color) return\n                if (roundChessData[idx]) setSelectedChess(idx)\n            }}>\n            {roundChessData[idx] ? (\n                <img\n                    src={`./floor${roundChessData[idx]}.svg`}\n                    alt={`floor${roundChessData[idx]}`}\n                />\n            ) : (\n                <div className={`${style.chessHolder}`}></div>\n            )}\n        </div>\n    ))\n\n    const rowChessArea = (level) =>\n        new Array(leftChessData[level]).fill().map((val, idx) => (\n            <div\n                className={`${style.chess}  ${style[store.color]} ${\n                    tempRoundChess.includes(`${level}-${idx}`)\n                        ? style.selected\n                        : ''\n                }`}\n                key={idx}\n                onClick={(ev) => {\n                    if (step !== STEP.pre_round || submitPressed) return\n                    if (tempRoundChess.includes(`${level}-${idx}`)) {\n                        setTempRoundChess(\n                            tempRoundChess.filter(\n                                (r) => r !== `${level}-${idx}`\n                            )\n                        )\n                    } else {\n                        if (tempRoundChess.length >= userNum) return\n                        setTempRoundChess([\n                            ...tempRoundChess,\n                            `${level}-${idx}`,\n                        ])\n                    }\n                }}\n                style={{\n                    marginLeft: idx % 6 === 0 ? '' : '.4rem',\n                    marginBottom: '.4rem',\n                }}>\n                <img src={`./floor${level}.svg`} alt={`floor${level}`} />\n            </div>\n        ))\n\n    const leftChessArea = Object.keys(leftChessData)\n        .sort()\n        .map((level) => {\n            // console.log(level)\n            return (\n                <div key={level} className={`${style.rowChessArea}`}>\n                    {rowChessArea(level)}\n                </div>\n            )\n        })\n\n    return (\n        <>\n            <div className={`${style.btnBars}`}>\n                <div className={`${style.msg}`}>\n                    <div>{tempMsg}</div>\n                    <div className={`${style.backView} ${style[store.color]}`}>\n                        &#xe900;\n                    </div>\n                </div>\n                <div className={`${style.btnArea}`}>\n                    {submitBtn[step] ||\n                        (step.replace('_turn', '') === store.color\n                            ? submitBtn.your\n                            : submitBtn.other)}\n                </div>\n            </div>\n            <div className={`${style.dash}`}>\n                <div className={`${style.cardArea}`}>\n                    {cardData.map((data, idx) => (\n                        <Card\n                            idx={idx}\n                            data={data}\n                            color={store.color}\n                            selectedCard={selectedCard}\n                            hoveredCard={hoveredCard}\n                            setSelectedCard={setSelectedCard}\n                            setHoveredCard={setHoveredCard}\n                            key={`${idx}-${data}`}\n                        />\n                    ))}\n                </div>\n                <div className={`${style.chessArea}`}>\n                    <div className={`${style.roundChessArea}`}>\n                        {roundChessArea}\n                    </div>\n                    <div className={`${style.leftChessArea}`}>\n                        {leftChessArea}\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport { DashBoard }\n","const calcScore = (cityData) => {\n    console.log(cityData)\n    const result = {\n        red: 0,\n        blue: 0,\n        green: 0,\n        yellow: 0,\n    }\n\n    //calc building score\n    const highest = {\n        height: 0,\n        color: '',\n    }\n\n    Object.keys(cityData).forEach((areaId) => {\n        const area = cityData[areaId]\n\n        const areaRes = {\n            red: 0,\n            blue: 0,\n            green: 0,\n            yellow: 0,\n        }\n\n        for (let x = 0; x < 3; ++x) {\n            for (let y = 0; y < 3; ++y) {\n                let topColor = '',\n                    height = 0\n\n                area[x][y].forEach((floor, idx) => {\n                    const [floorHeight, floorColor] = [\n                        parseInt(floor),\n                        floor.substr(1),\n                    ]\n\n                    height = height + floorHeight\n                    if (idx === area[x][y].length - 1) topColor = floorColor\n                })\n                if (!topColor) continue\n\n                if (height > highest.height) {\n                    highest.height = height\n                    highest.color = topColor\n                } else if (height === highest.height) {\n                    highest.color = ''\n                }\n\n                areaRes[topColor] += 1\n                result[topColor] += 1\n            }\n        }\n\n        const mostColor = {\n            color: '',\n            num: 0,\n        }\n\n        for (let a in areaRes) {\n            if (areaRes[a] > mostColor.num) {\n                mostColor.color = a\n                mostColor.num = areaRes[a]\n            } else if (areaRes[a] === mostColor.num) {\n                mostColor.color = ''\n            }\n        }\n\n        if (mostColor.color) {\n            result[mostColor.color] += 3\n        }\n    })\n\n    if (highest.color) {\n        result[highest.color] += 5\n    }\n\n    return result\n}\n\nexport { calcScore }\n","import { atom } from 'recoil'\nimport { store } from '../store'\n\nconst userInfoAtom = atom({\n    default: store.userList,\n    key: 'user-info-atom',\n})\n\nexport { userInfoAtom }\n","import { useEffect, useState } from 'react'\nimport { useRecoilValue } from 'recoil'\nimport { stepAtom } from '../../App'\nimport { net } from '../../net'\nimport { STEP, store } from '../store'\nimport { calcScore } from './calc'\nimport { userInfoAtom } from './data'\nimport style from './infoPanel.module.css'\n\nfunction InfoPanel() {\n    const userInfo = useRecoilValue(userInfoAtom)\n    const step = useRecoilValue(stepAtom)\n    const [spread, setSpread] = useState({})\n\n    // useEffect(() => {\n    //     const preOnmessage = net.ws.preOnmessage\n    //     net.ws.onmessage = ev => {\n    //         if (preOnmessage) preOnmessage(ev)\n\n    //         const { type, payload } = JSON.parse(ev.data)\n    //         if(type === constant.WS_TYPE.step && )\n    //     }\n    // },[])\n\n    useEffect(() => {\n        console.log(userInfo)\n    }, [userInfo])\n\n    useEffect(() => {\n        console.log('info.js 18')\n        if (step !== STEP.round_end) return\n\n        const score = calcScore(store.cityData)\n        net.postScore({\n            userId: store.userId,\n            score: score[store.color],\n        }).then(() => {\n            console.log('ok')\n        })\n        console.log(score)\n    }, [step])\n\n    const spreadClick = (color) => (ev) => {\n        const spreadTmp = { ...spread }\n        spreadTmp[color] = spreadTmp[color] ? false : true\n        setSpread(spreadTmp)\n    }\n\n    return (\n        <div className={`${style.info}`}>\n            {userInfo.map((user) => (\n                <div\n                    key={user.color}\n                    className={`${style[user.color]} ${style.userboard}`}\n                    onClick={spreadClick(user.color)}>\n                    <div className={`${style.pin}`}>\n                        <div className={`${style.avatar}`}>\n                            {step.replace('_turn', '') === user.color ? (\n                                <>\n                                    <div\n                                        className={`${style.pointerContainer} ${style.long}`}></div>\n                                    <div\n                                        className={`${style.pointerContainer}`}></div>\n                                </>\n                            ) : null}\n                        </div>\n                        <div className={`${style.infoRow}`}>\n                            {`位置：${user.up} 得分：${user.score}`}\n                        </div>\n                    </div>\n                    <div\n                        className={`${style.chess} ${\n                            spread[user.color] ? '' : style.hide\n                        }`}>\n                        {user.chessData.map((chess, idx) => (\n                            <img\n                                key={idx}\n                                src={`./floor${chess}.svg`}\n                                alt={`floor${chess}`}\n                            />\n                        ))}\n                    </div>\n                    <div\n                        className={`${style.chess} ${\n                            spread[user.color] ? '' : style.hide\n                        }`}>\n                        {Object.keys(user.leftChessData)\n                            .sort()\n                            .map((chessType) => (\n                                <div\n                                    key={chessType}\n                                    className={`${style.leftChess}`}>\n                                    <img\n                                        src={`./floor${chessType}.svg`}\n                                        alt={`floor${chessType}`}\n                                    />\n                                    <div>{user.leftChessData[chessType]}</div>\n                                </div>\n                            ))}\n                    </div>\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport { InfoPanel, userInfoAtom }\n","import { useEffect, useRef } from 'react'\nimport { useRecoilValue, useSetRecoilState } from 'recoil'\nimport { stepAtom } from '../../App'\nimport { Board, constant, operate, startGame } from '../../game'\nimport { net } from '../../net'\nimport { playedDataAtom } from '../Chatroom'\nimport { userInfoAtom } from '../InfoPanel'\nimport { store } from '../store'\nimport style from './stage.module.css'\n\nfunction Stage() {\n    const ref = useRef(null)\n    const step = useRecoilValue(stepAtom)\n    const setPlayedData = useSetRecoilState(playedDataAtom)\n    const setUserInfo = useSetRecoilState(userInfoAtom)\n\n    useEffect(() => {\n        startGame(ref.current, store.up, store.cityData)\n\n        const preOnmessage = net.ws.onmessage\n        net.ws.onmessage = (ev) => {\n            console.log('stage.js 20')\n            if (preOnmessage) preOnmessage(ev)\n            const { type, payload } = JSON.parse(ev.data)\n\n            if (type === constant.WS_TYPE.step) {\n                if (payload.playedData) {\n                    setPlayedData(payload.playedData)\n                    store.playedData = payload.playedData\n                }\n                if (payload.play) {\n                    const { floor, card, area, up } = payload.play\n                    operate.play(floor, card, area, up)\n                }\n                if (payload.cityData) {\n                    store.cityData = payload.cityData\n                }\n                if (payload.users) {\n                    store.userList = store.userList.map((user, idx) => {\n                        const newUser = payload.users.find(\n                            (pu) => pu.color === user.color\n                        )\n\n                        const res = { ...user, ...newUser }\n                        return res\n                    })\n\n                    setUserInfo(store.userList)\n                }\n            }\n        }\n    }, [setPlayedData, setUserInfo])\n\n    useEffect(() => {\n        if (step.replace('_turn', '') === store.color) {\n            Board.changeMode(constant.OPER_MODE)\n        } else {\n            Board.changeMode(constant.VIEW_MODE)\n        }\n    }, [step])\n    return <div ref={ref} className={`${style.stage}`}></div>\n}\n\nexport { Stage }\n","import { useEffect } from 'react'\nimport { atom, useRecoilState, useSetRecoilState } from 'recoil'\nimport './App.css'\nimport { Chatroom, playedDataAtom } from './components/Chatroom'\nimport { DashBoard } from './components/DashBoard'\nimport { leftChessDataAtom, tempMsgAtom } from './components/DashBoard/data'\nimport { InfoPanel, userInfoAtom } from './components/InfoPanel'\nimport { Stage } from './components/Stage'\nimport { store } from './components/store'\nimport { constant } from './game'\nimport { net } from './net'\n\nconst readyAtom = atom({\n    default: false,\n    key: 'ready-atom',\n})\n\nconst stepAtom = atom({\n    key: 'step-atom',\n    default: store.step,\n})\n\nfunction App() {\n    const [isReady, readyGo] = useRecoilState(readyAtom)\n    const setStep = useSetRecoilState(stepAtom)\n    const setTempMsg = useSetRecoilState(tempMsgAtom)\n    const setPlayedData = useSetRecoilState(playedDataAtom)\n    const setUserInfo = useSetRecoilState(userInfoAtom)\n    const setLeftChessData = useSetRecoilState(leftChessDataAtom)\n\n    useEffect(() => {\n        const roomKey = window.location.pathname.split('/')[1]\n        const userId = window.location.search.split('=')[1]\n\n        net.setUrl('http://127.0.0.1:9000/')\n        net.setKey(roomKey)\n        net.setId(userId)\n        net.getInitData()\n            .then(() => {\n                readyGo(true)\n                net.setWs('ws://127.0.0.1:9000/')\n                setPlayedData(store.playedData)\n                setUserInfo(store.userList)\n                setLeftChessData(store.leftChessData)\n            })\n            .then((data) => {\n                const preOnmessage = net.ws.onmessage\n                net.ws.onmessage = (ev) => {\n                    console.log('app.js 42')\n                    preOnmessage(ev)\n                    const { type, payload } = JSON.parse(ev.data)\n\n                    if (type === constant.WS_TYPE.step) {\n                        setStep(payload.step)\n                        store.step = payload.step\n                    }\n                }\n                // setStep(data.data.step)\n            })\n    }, [\n        readyGo,\n        setStep,\n        setTempMsg,\n        setUserInfo,\n        setPlayedData,\n        setLeftChessData,\n    ])\n\n    return (\n        <div className='App'>\n            {isReady ? (\n                <>\n                    <Chatroom />\n                    <DashBoard />\n                    <InfoPanel />\n                    <Stage />\n                </>\n            ) : null}\n        </div>\n    )\n}\n\nexport { readyAtom, stepAtom }\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { RecoilRoot } from 'recoil'\n\nReactDOM.render(\n    <React.StrictMode>\n        <RecoilRoot>\n            <App />\n        </RecoilRoot>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}